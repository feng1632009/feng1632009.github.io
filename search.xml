<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python数据结构与算法系列之插入排序</title>
      <link href="/2018/11/11/python-shu-ju-jie-gou-yu-suan-fa-xi-lie-zhi-cha-ru-pai-xu/"/>
      <url>/2018/11/11/python-shu-ju-jie-gou-yu-suan-fa-xi-lie-zhi-cha-ru-pai-xu/</url>
      
        <content type="html"><![CDATA[<p>插入排序<code>（英语：Insertion Sort）</code>是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p><pre><code>[8, 6, 2, 3, 1, 5, 7, 4]</code></pre><ul><li>Code</li></ul><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""Insertion Sort"""</span>array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">for</span> Index <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 将第一个元素标记为已排序过的元素，所以就从1开始</span>    i <span class="token operator">=</span> Index  <span class="token comment" spellcheck="true"># 当前值的索引</span>    temp <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 当前值作为临时变量</span>    <span class="token keyword">while</span> i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">and</span> temp <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 所以大于0并且临时变量小于当前索引的前一个元素</span>        array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 当前索引的值等于前一个值</span>        i <span class="token operator">-=</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true"># 把排序过的元素往左移一格</span>    array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp  <span class="token comment" spellcheck="true"># 当前值就等于临时变量</span><span class="token keyword">print</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span></code></pre><ul><li>Output</li></ul><pre><code>[1, 2, 3, 4, 5, 6, 7, 8]</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://zh.wikipedia.org/wiki/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F" target="_blank" rel="noopener">维基百科 - 插入排序</a></li><li><a href="http://www.cnblogs.com/kkun/archive/2011/11/23/insertion_sort.html" target="_blank" rel="noopener">经典排序算法 – 插入排序Insertion sort</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python数据结构与算法系列之归并排序</title>
      <link href="/2018/11/11/python-shu-ju-jie-gou-yu-suan-fa-xi-lie-zhi-gui-bing-pai-xu/"/>
      <url>/2018/11/11/python-shu-ju-jie-gou-yu-suan-fa-xi-lie-zhi-gui-bing-pai-xu/</url>
      
        <content type="html"><![CDATA[<p>归并排序<code>(Merge sort)</code>主要思想是分治法<code>(divide and conquer)</code>，就是要将<code>n</code>个元素的序列划分为<code>两个序列</code>，再将两个序列划分为4个序列，直到每个序列只有一个元素，最后，再将两个有序序列归并成一个有序的序列。</p><ul><li>Code</li></ul><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""Merge Sort"""</span><span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>left_array<span class="token punctuation">,</span> right_array<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    对数组left_array和right_array进行归并    """</span>    temp_array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 新的已排序好的临时列表</span>    left_index <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true"># left_array列表的下标</span>    right_index <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true"># right_array列表的下标</span>    <span class="token keyword">while</span> left_index <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>left_array<span class="token punctuation">)</span> <span class="token operator">and</span> right_index <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>right_array<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        对两个列表中的元素 两两对比，将最小的元素，放到result中，并对当前列表下标加1        """</span>        <span class="token keyword">if</span> left_array<span class="token punctuation">[</span>left_index<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> right_array<span class="token punctuation">[</span>right_index<span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 如果左边的值小于等于右边的值</span>            temp_array<span class="token punctuation">.</span>append<span class="token punctuation">(</span>left_array<span class="token punctuation">[</span>left_index<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 临时数组加入左边的值</span>            left_index <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true"># left_array数组的下标+1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            temp_array<span class="token punctuation">.</span>append<span class="token punctuation">(</span>right_array<span class="token punctuation">[</span>right_index<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 临时数组加入右边的值</span>            right_index <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true"># right_array数组的下标+1</span>    temp_array <span class="token operator">+=</span> left_array<span class="token punctuation">[</span>left_index<span class="token punctuation">:</span><span class="token punctuation">]</span>    temp_array <span class="token operator">+=</span> right_array<span class="token punctuation">[</span>right_index<span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> temp_array<span class="token keyword">def</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    对数组array进行拆分    """</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 如果数组的元素少于或只有一个</span>        <span class="token keyword">return</span> array  <span class="token comment" spellcheck="true"># 直接把数组返回</span>    middle <span class="token operator">=</span> int<span class="token punctuation">(</span>len<span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 把数组进行拆分</span>    left_array <span class="token operator">=</span> merge_sort<span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token punctuation">:</span>middle<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 左边的数组</span>    right_array <span class="token operator">=</span> merge_sort<span class="token punctuation">(</span>array<span class="token punctuation">[</span>middle<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 右边的数组</span>    <span class="token keyword">return</span> merge<span class="token punctuation">(</span>left_array<span class="token punctuation">,</span> right_array<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 对排序好的两个列表合并，产生一个新的排序好的列表</span><span class="token keyword">print</span><span class="token punctuation">(</span>merge_sort<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>Output</li></ul><pre><code>[1, 2, 3, 4, 5, 6, 7, 8]</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://code.py40.com/algorithm/2017/06/29/python-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/" target="_blank" rel="noopener">Python-归并排序</a></li><li><a href="http://www.cnblogs.com/piperck/p/6030122.html" target="_blank" rel="noopener">归并排序详解(python实现)</a></li><li><a href="http://www.jianshu.com/p/3ad5373465fd" target="_blank" rel="noopener">python归并排序–递归实现</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python数据结构与算法系列之队列</title>
      <link href="/2018/11/09/python-shu-ju-jie-gou-yu-suan-fa-xi-lie-zhi-dui-lie/"/>
      <url>/2018/11/09/python-shu-ju-jie-gou-yu-suan-fa-xi-lie-zhi-dui-lie/</url>
      
        <content type="html"><![CDATA[<p>队列（queue），是先进先出（FIFO, First-In-First-Out）的线性表，在具体应用中通常用链表或者数组来实现，队列只允许在后端（称为rear）进行插入操作，在前端（称为front）进行删除操作，队列的操作方式和堆栈类似，唯一的区别在于队列只允许新数据在后端进行添加。</p><blockquote><p>摘录<a href="https://zh.wikipedia.org/wiki/%E9%98%9F%E5%88%97" target="_blank" rel="noopener">维基百科</a></p></blockquote><p>如图所示</p><p><img src="https://blog.ansheng.me/images/2017/01/1484793256.png" alt="duilie"></p><h2 id="队列的接口"><a href="#队列的接口" class="headerlink" title="队列的接口"></a>队列的接口</h2><p>一个队列至少需要如下接口：</p><table><thead><tr><th>接口</th><th>描述</th></tr></thead><tbody><tr><td>add(x)</td><td>入队</td></tr><tr><td>delete()</td><td>出队</td></tr><tr><td>clear()</td><td>清空队列</td></tr><tr><td>isEmpty()</td><td>判断队列是否为空</td></tr><tr><td>isFull()</td><td>判断队列是否未满</td></tr><tr><td>length()</td><td>队列的当前长度</td></tr><tr><td>capability()</td><td>队列的容量</td></tr></tbody></table><p>然而在Python中，可以使用<code>collections</code>模块下的<code>deque</code>函数，<code>deque</code>函数提供了队列所有的接口，那么先让我门看看队列<code>deque</code>函数提供了那些API把：</p><blockquote><p>collections.deque是双端队列，即左右两边都是可进可出的</p></blockquote><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>append(x)</td><td>在队列的右边添加一个元素</td></tr><tr><td>appendleft(x)</td><td>在队列的左边添加一个元素</td></tr><tr><td>clear()</td><td>从队列中删除所有元素</td></tr><tr><td>copy()</td><td>返回一个浅拷贝的副本</td></tr><tr><td>count(value)</td><td>返回值在队列中出现的次数</td></tr><tr><td>extend([x..])</td><td>使用可迭代的元素扩展队列的右侧</td></tr><tr><td>extendleft([x..])</td><td>使用可迭代的元素扩展队列的右侧</td></tr><tr><td>index(value, [start, [stop]])</td><td>返回值的第一个索引，如果值不存在，则引发ValueError。</td></tr><tr><td>insert(index, object)</td><td>在索引之前插入对象</td></tr><tr><td>maxlen</td><td>获取队列的最大长度</td></tr><tr><td>pop()</td><td>删除并返回最右侧的元素</td></tr><tr><td>popleft()</td><td>删除并返回最左侧的元素</td></tr><tr><td>remove(value)</td><td>删除查找到的第一个值</td></tr><tr><td>reverse()</td><td>队列中的所有元素进行翻转</td></tr><tr><td>rotate()</td><td>向右旋转队列n步（默认n = 1），如果n为负，向左旋转。</td></tr></tbody></table><p>现在我们在Python中测试下这些个API的使用吧。</p><p>入队操作</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> collections <span class="token keyword">import</span> deque<span class="token comment" spellcheck="true"># 创建一个队列</span><span class="token operator">>></span><span class="token operator">></span> q <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> qdeque<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 往队列中添加一个元素</span><span class="token operator">>></span><span class="token operator">></span> q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> qdeque<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 往队列最左边添加一个元素</span><span class="token operator">>></span><span class="token operator">></span> q<span class="token punctuation">.</span>appendleft<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> qdeque<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 同时入队多个元素</span><span class="token operator">>></span><span class="token operator">></span> q<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> qdeque<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 在最左边同时入队多个元素</span><span class="token operator">>></span><span class="token operator">></span> q<span class="token punctuation">.</span>extendleft<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> qdeque<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>出队操作</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 删除队列中最后一个</span><span class="token operator">>></span><span class="token operator">></span> q<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">6</span><span class="token operator">>></span><span class="token operator">></span> qdeque<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 删除队列中最左边的一个元素</span><span class="token operator">>></span><span class="token operator">></span> q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">9</span><span class="token operator">>></span><span class="token operator">></span> qdeque<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>其他的API</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 清空队列</span><span class="token operator">>></span><span class="token operator">></span> qdeque<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> q<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> qdeque<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 判断队列是否为空</span><span class="token operator">>></span><span class="token operator">></span> <span class="token operator">not</span> q<span class="token boolean">True</span><span class="token comment" spellcheck="true"># 获取队列最大长度</span><span class="token operator">>></span><span class="token operator">></span> q <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> q<span class="token punctuation">.</span>maxlen<span class="token number">10</span><span class="token comment" spellcheck="true"># 查看某个元素出现的次数</span><span class="token operator">>></span><span class="token operator">></span> q<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> q<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token number">4</span><span class="token comment" spellcheck="true"># 查看当前队列长度</span><span class="token operator">>></span><span class="token operator">></span> len<span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token number">6</span><span class="token comment" spellcheck="true"># 判断队列是否满了</span><span class="token operator">>></span><span class="token operator">></span> q<span class="token punctuation">.</span>maxlen <span class="token operator">==</span> len<span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token boolean">False</span><span class="token comment" spellcheck="true"># 队列元素反转</span><span class="token operator">>></span><span class="token operator">></span> q <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> q<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> qdeque<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> maxlen<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 查看元素对应的索引</span><span class="token operator">>></span><span class="token operator">></span> q<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token number">4</span><span class="token comment" spellcheck="true"># 删除匹配到的第一个元素</span><span class="token operator">>></span><span class="token operator">></span> qdeque<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> maxlen<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> q<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> qdeque<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> maxlen<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 元素位置进行旋转</span><span class="token operator">>></span><span class="token operator">></span> qdeque<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> maxlen<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> q<span class="token punctuation">.</span>rotate<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> qdeque<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> maxlen<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> q<span class="token punctuation">.</span>rotate<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> qdeque<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> maxlen<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用负数</span><span class="token operator">>></span><span class="token operator">></span> q<span class="token punctuation">.</span>rotate<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> qdeque<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> maxlen<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span></code></pre><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="二项式系数"><a href="#二项式系数" class="headerlink" title="二项式系数"></a>二项式系数</h3><p><strong>题目</strong></p><p>编写程序，求二项式系数表中(杨辉三角)第K层系列数</p><pre class=" language-text"><code class="language-text">   1  1  1 1  2  11 3  3  1......</code></pre><p><strong>思路</strong></p><ol><li>把第K行的系数存储在队列中</li><li>依次出队K层的系数（每行最后一个1不出队），并推算K+1层系数，添加到队尾，最后在队尾添加一个1，便变成了k+1行。</li></ol><p><strong>解决代码</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/use/bin/env python</span><span class="token comment" spellcheck="true"># _*_ coding:utf-8 _*_</span><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque<span class="token keyword">def</span> <span class="token function">yanghui</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :param k: 杨辉三角中第几层    :return: 第K层的系数    """</span>    q <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 创建一个队列，默认从1开始</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 迭代要查找的层数</span>        <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 循环需要出队多少次</span>            q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 第一个数加上队列中第二个数并赋值到队列末尾</span>        q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 每次查找结束后都需要在队列最右边添加个1</span>    <span class="token keyword">return</span> list<span class="token punctuation">(</span>q<span class="token punctuation">)</span>result <span class="token operator">=</span> yanghui<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><h3 id="划分无冲突子集"><a href="#划分无冲突子集" class="headerlink" title="划分无冲突子集"></a>划分无冲突子集</h3><p><strong>题目</strong></p><p>某动物园搬家，要运走N种动物，老虎与狮子放在一起会大家，大象与犀牛放在一个笼子会打架，野猪和野狗放在一个笼子里会打架，现在需要我们设计一个算法，使得装进同一个笼子的动物互相不打架。</p><p><strong>思路</strong></p><ol><li>把所有动物按次序入队</li><li>创建一个笼子(集合)，出队一个动物，如果和笼子内动物无冲冲突则添加到该笼子，有冲突则添加到队尾，等待进入新笼子</li><li>由于队列先进先出的特性，如果当前出队动物的index不大于前一个出队动物的index，说明当前队列中所有动物已经尝试过进入且进入不了当前笼子，此时创建信的笼子(集合)</li></ol><p><strong>解决代码</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/use/bin/env python</span><span class="token comment" spellcheck="true"># _*_ coding:utf-8 _*_</span><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque<span class="token keyword">def</span> <span class="token function">division</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :param m: 冲突关系矩阵    :param n: 几种动物    :return: 返回一个栈，栈内包含了所有的笼子    """</span>    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 创建一个栈</span>    q <span class="token operator">=</span> deque<span class="token punctuation">(</span>range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 初始化队列，里面放着动物的序号</span>    pre <span class="token operator">=</span> n  <span class="token comment" spellcheck="true"># 前一个动物的下标</span>    <span class="token keyword">while</span> q<span class="token punctuation">:</span>        cur <span class="token operator">=</span> q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 从队头出队一个动物</span>        <span class="token keyword">if</span> pre <span class="token operator">>=</span> cur<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 是否需要创建笼子</span>            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 创建一个笼子</span>        <span class="token comment" spellcheck="true"># 当前的动物是否与笼子内的动物有冲突</span>        <span class="token keyword">for</span> a <span class="token keyword">in</span> res<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 迭代栈中最顶层的笼子</span>            <span class="token keyword">if</span> m<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 有冲突</span>                q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 重新放入队列的尾部</span>                <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 当前动物和当前笼子中的所有动物没冲突</span>            res<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 当前动物放入最上面的笼子中</span>        pre <span class="token operator">=</span> cur  <span class="token comment" spellcheck="true"># 当前变成之前的</span>    <span class="token keyword">return</span> resN <span class="token operator">=</span> <span class="token number">9</span>R <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true"># 冲突对应关系表</span>    <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span>M <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> N <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 冲洗关系矩阵M，0代表不冲突</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> j <span class="token keyword">in</span> R<span class="token punctuation">:</span>    M<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> M<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true"># 1代表冲突</span>result <span class="token operator">=</span> division<span class="token punctuation">(</span>M<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><h2 id="数字变换"><a href="#数字变换" class="headerlink" title="数字变换"></a>数字变换</h2><p><strong>题目</strong></p><p>对于一对正整数a,b,对a只能进行加1，减1，乘2操作，问最少对a进行几次操作能得到b？</p><p>例如：</p><ol><li>a=3,b=11: 可以通过3<em>2</em>2-1，3次操作得到11；</li><li>a=5,b=8：可以通过(5-1)*2，2次操作得到8；</li></ol><p><strong>思路</strong></p><p>本题用广度优先搜索，寻找a到b状态迁移最短路径，对于每个状态s，可以转换到撞到s+1,s-1,s*2:</p><ol><li>把初始化状态a入队；</li><li>出队一个状态s，然后s+1,s-1,s*2入队；</li><li>反复循环第二步骤，直到状态s为b；</li></ol><p><strong>解决代码</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/use/bin/env python</span><span class="token comment" spellcheck="true"># _*_ coding:utf-8 _*_</span><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque<span class="token keyword">def</span> <span class="token function">atob</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :param a: 开始的数字    :param b: 最终转换之后的数字    :return: 最小匹配的次数    """</span>    q <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># a=当前数字，0=操作的次数</span>    checked <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">}</span>  <span class="token comment" spellcheck="true"># 已经检查过的数据</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        s<span class="token punctuation">,</span> c <span class="token operator">=</span> q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> s <span class="token operator">==</span> b<span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token keyword">if</span> s <span class="token operator">&lt;</span> b<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 要计算的数小于计算之后的数字</span>            <span class="token keyword">if</span> s <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">not</span> <span class="token keyword">in</span> checked<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 如果要计算的数字+1不在已检查过的数据集合中</span>                q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 要计算的数+1，转换次数+1</span>                checked<span class="token punctuation">.</span>add<span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 把计算过的数添加到checked集合中</span>            <span class="token keyword">if</span> s <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">not</span> <span class="token keyword">in</span> checked<span class="token punctuation">:</span>                q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                checked<span class="token punctuation">.</span>add<span class="token punctuation">(</span>s <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> s <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 要计算的数大于0</span>            <span class="token keyword">if</span> s <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">not</span> <span class="token keyword">in</span> checked<span class="token punctuation">:</span>                q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                checked<span class="token punctuation">.</span>add<span class="token punctuation">(</span>s <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>result <span class="token operator">=</span> atob<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python数据结构与算法系列之选择排序</title>
      <link href="/2018/11/09/python-shu-ju-jie-gou-yu-suan-fa-xi-lie-zhi-xuan-ze-pai-xu/"/>
      <url>/2018/11/09/python-shu-ju-jie-gou-yu-suan-fa-xi-lie-zhi-xuan-ze-pai-xu/</url>
      
        <content type="html"><![CDATA[<p>选择排序<code>（Selection sort）</code>是一种简单直观的排序算法。它的工作原理如下：</p><ol><li>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置；</li><li>然后，再从剩余未排序元素中继续寻找最小（大）元素；</li><li>然后放到已排序序列的末尾；</li><li>以此类推，直到所有元素均排序完毕；</li></ol><p>如有下面一个数组，我们需要进行选择排序，从小到大</p><pre><code>[8, 6, 2, 3, 1, 5, 7, 4]</code></pre><ul><li>Code</li></ul><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""Selection Sort"""</span>array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 重复元素个数-1次，因为最后一个元素已经是最大或者最小值了</span>    min_index <span class="token operator">=</span> i  <span class="token comment" spellcheck="true"># 把第一个没有排序过的元素设置为最小值</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token punctuation">,</span> len<span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 遍历每一个没有排序过的元素</span>        <span class="token keyword">if</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 如果元素小于现在的最小值</span>            min_index <span class="token operator">=</span> j  <span class="token comment" spellcheck="true"># 将此元素设置为新的最小值</span>    array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 将最小值和第一个没有排序过的位置交换</span><span class="token keyword">print</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span></code></pre><ul><li>Output</li></ul><pre><code>[1, 2, 3, 4, 5, 6, 7, 8]</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://bubkoo.com/2014/01/13/sort-algorithm/selection-sort/" target="_blank" rel="noopener">常见排序算法 - 选择排序 (Selection Sort)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python算法实战系列之冒泡</title>
      <link href="/2018/11/09/python-suan-fa-shi-zhan-xi-lie-zhi-mou-pao/"/>
      <url>/2018/11/09/python-suan-fa-shi-zhan-xi-lie-zhi-mou-pao/</url>
      
        <content type="html"><![CDATA[<ol><li>比较相邻的元素，如果第一个比第二个大，就交换他们两个的位置；</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这步做完后，最后的元素会是最大的数；</li><li>针对所有的元素重复以上的步骤，除了最后一个，也就是每次比较之后最大的书不做任何操作；</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较；</li></ol><ul><li>Code</li></ul><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""Bubble Sort"""</span>array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>            array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span></code></pre><ul><li>Output</li></ul><pre><code>[12, 23, 32, 45]</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://bubkoo.com/2014/01/12/sort-algorithm/bubble-sort/" target="_blank" rel="noopener">常见排序算法 - 冒泡排序 (Bubble Sort)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python数据结构与算法系列之栈</title>
      <link href="/2018/11/08/python-shu-ju-jie-gou-yu-suan-fa-xi-lie-zhi-zhan/"/>
      <url>/2018/11/08/python-shu-ju-jie-gou-yu-suan-fa-xi-lie-zhi-zhan/</url>
      
        <content type="html"><![CDATA[<p>栈(stack)又称之为堆栈是一个特殊的有序表，其插入和删除操作都在栈顶进行操作，并且按照先进后出，后进先出的规则进行运作。</p><p>如下图所示</p><p><img src="https://blog.ansheng.me/images/2017/01/1484725410.png" alt="zhan"></p><p>例如枪的弹匣，第一颗放进弹匣的子弹反而在发射出去的时候是最后一个，而最后放入弹匣的一颗子弹在打出去的时候是第一颗发射出去的。</p><h2 id="栈的接口"><a href="#栈的接口" class="headerlink" title="栈的接口"></a>栈的接口</h2><p>如果你创建了一个栈，那么那么应该具有以下接口来进行对栈的操作</p><table><thead><tr><th>接口</th><th>描述</th></tr></thead><tbody><tr><td>push()</td><td>入栈</td></tr><tr><td>pop()</td><td>出栈</td></tr><tr><td>isEmpty()</td><td>判断是否为空栈</td></tr><tr><td>length()</td><td>获取栈的长度</td></tr><tr><td>getTop()</td><td>取栈顶的元素，元素不出栈</td></tr></tbody></table><p>知道栈需要上述的接口后，那么在Python中，列表就类似是一个栈，提供接口如下：</p><table><thead><tr><th>操作</th><th>描述</th></tr></thead><tbody><tr><td>s = []</td><td>创建一个栈</td></tr><tr><td>s.append(x)</td><td>往栈内添加一个元素</td></tr><tr><td>s.pop()</td><td>在栈内删除一个元素</td></tr><tr><td>not s</td><td>判断是否为空栈</td></tr><tr><td>len(s)</td><td>获取栈内元素的数量</td></tr><tr><td>s[-1]</td><td>获取栈顶的元素</td></tr></tbody></table><p>Python中的栈接口使用实例：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建一个栈</span>In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 往栈内添加一个元素</span>In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> sOut<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 删除栈内的一个元素</span>In <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">1</span>In <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> sOut<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 判断栈是否为空</span>In <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token operator">not</span> sOut<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean">True</span>In <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token operator">not</span> sOut<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># 获取栈内元素的数量</span>In <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">1</span>In <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 取栈顶的元素</span>In <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">3</span></code></pre><h2 id="一大波实例"><a href="#一大波实例" class="headerlink" title="一大波实例"></a>一大波实例</h2><p>在了解栈的基本概念之后，让我们再来看几个实例，以便于理解栈。</p><h3 id="括号匹配"><a href="#括号匹配" class="headerlink" title="括号匹配"></a>括号匹配</h3><p><strong>题目</strong></p><p>假如表达式中允许包含三中括号<code>()</code>、<code>[]</code>、<code>{}</code>，其嵌套顺序是任意的，例如：</p><p>正确的格式</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p>错误的格式</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>编写一个函数，判断一个表达式字符串，括号匹配是否正确</p><p><strong>思路</strong></p><ol><li>创建一个空栈，用来存储尚未找到的左括号；</li><li>便利字符串，遇到左括号则压栈，遇到右括号则出栈一个左括号进行匹配；</li><li>在第二步骤过程中，如果空栈情况下遇到右括号，说明缺少左括号，不匹配；</li><li>在第二步骤遍历结束时，栈不为空，说明缺少右括号，不匹配；</li></ol><p><strong>解决代码</strong></p><p>建议在<code>pycharm</code>中打断点，以便于更好的理解</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/use/bin/env python</span><span class="token comment" spellcheck="true"># _*_ coding:utf-8 _*_</span>LEFT <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'('</span><span class="token punctuation">,</span> <span class="token string">'['</span><span class="token punctuation">,</span> <span class="token string">'{'</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true"># 左括号</span>RIGHT <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">')'</span><span class="token punctuation">,</span> <span class="token string">']'</span><span class="token punctuation">,</span> <span class="token string">'}'</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true"># 右括号</span><span class="token keyword">def</span> <span class="token function">match</span><span class="token punctuation">(</span>expr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :param expr:  传过来的字符串    :return:  返回是否是正确的    """</span>    stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 创建一个栈</span>    <span class="token keyword">for</span> brackets <span class="token keyword">in</span> expr<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 迭代传过来的所有字符串</span>        <span class="token keyword">if</span> brackets <span class="token keyword">in</span> LEFT<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 如果当前字符在左括号内</span>            stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>brackets<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 把当前左括号入栈</span>        <span class="token keyword">elif</span> brackets <span class="token keyword">in</span> RIGHT<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 如果是右括号</span>            <span class="token keyword">if</span> <span class="token operator">not</span> stack <span class="token operator">or</span> <span class="token operator">not</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> ord<span class="token punctuation">(</span>brackets<span class="token punctuation">)</span> <span class="token operator">-</span> ord<span class="token punctuation">(</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 如果当前栈为空，()]</span>                <span class="token comment" spellcheck="true"># 如果右括号减去左括号的值不是小于等于2大于等于1</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>  <span class="token comment" spellcheck="true"># 返回False</span>            stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 删除左括号</span>    <span class="token keyword">return</span> <span class="token operator">not</span> stack  <span class="token comment" spellcheck="true"># 如果栈内没有值则返回True，否则返回False</span>result <span class="token operator">=</span> match<span class="token punctuation">(</span><span class="token string">'[(){()}]'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><h3 id="迷宫问题"><a href="#迷宫问题" class="headerlink" title="迷宫问题"></a>迷宫问题</h3><p><strong>题目</strong></p><p>用一个二维数组表示一个简单的迷宫，用0表示通路，用1表示阻断，老鼠在每个点上可以移动相邻的东南西北四个点，设计一个算法，模拟老鼠走迷宫，找到从入口到出口的一条路径。</p><p>如图所示</p><p><img src="https://blog.ansheng.me/images/2017/01/1484725431.png" alt="migong"></p><p>出去的正确线路如图中的红线所示</p><p><strong>思路</strong></p><ol><li>用一个栈来记录老鼠从入口到出口的路径</li><li>走到某点后，将该点左边压栈，并把该点值置为1，表示走过了；</li><li>从临近的四个点中可到达的点中任意选取一个，走到该点；</li><li>如果在到达某点后临近的4个点都不走，说明已经走入死胡同，此时退栈，退回一步尝试其他点；</li><li>反复执行第二、三、四步骤直到找到出口；</li></ol><p><strong>解决代码</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/use/bin/env python</span><span class="token comment" spellcheck="true"># _*_ coding:utf-8 _*_</span><span class="token keyword">def</span> <span class="token function">initMaze</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :return: 初始化迷宫    """</span>    maze <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">7</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 用列表解析创建一个7*7的二维数组，为了确保迷宫四周都是墙</span>    walls <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token comment" spellcheck="true"># 记录了墙的位置</span>        <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># (4, 3),  # 如果把(4, 3)点也设置为墙，那么整个迷宫是走不出去的，所以会返回一个空列表</span>        <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 把迷宫的四周设置成墙</span>        maze<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> maze<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        maze<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> maze<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> j <span class="token keyword">in</span> walls<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 把所有墙的点设置为1</span>        maze<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">return</span> maze<span class="token triple-quoted-string string">"""[1, 1, 1, 1, 1, 1, 1][1, 0, 0, 1, 0, 0, 1][1, 1, 0, 0, 0, 1, 1][1, 0, 0, 1, 1, 0, 1][1, 0, 1, 0, 0, 0, 1][1, 0, 0, 0, 1, 0, 1][1, 1, 1, 1, 1, 1, 1]"""</span><span class="token keyword">def</span> <span class="token function">path</span><span class="token punctuation">(</span>maze<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :param maze: 迷宫    :param start: 起始点    :param end: 结束点    :return: 行走的每个点    """</span>    i<span class="token punctuation">,</span> j <span class="token operator">=</span> start  <span class="token comment" spellcheck="true"># 分解起始点的坐标</span>    ei<span class="token punctuation">,</span> ej <span class="token operator">=</span> end  <span class="token comment" spellcheck="true"># 分解结束点的左边</span>    stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 创建一个栈，并让老鼠站到起始点的位置</span>    maze<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true"># 走过的路置为1</span>    <span class="token keyword">while</span> stack<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 栈不为空的时候继续走，否则退出</span>        i<span class="token punctuation">,</span> j <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 获取当前老鼠所站的位置点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span>ei<span class="token punctuation">,</span> ej<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">break</span>  <span class="token comment" spellcheck="true"># 如果老鼠找到了出口</span>        <span class="token keyword">for</span> di<span class="token punctuation">,</span> dj <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 左右上下</span>            <span class="token keyword">if</span> maze<span class="token punctuation">[</span>i <span class="token operator">+</span> di<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> dj<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 如果当前点可走</span>                maze<span class="token punctuation">[</span>i <span class="token operator">+</span> di<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> dj<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true"># 把当前点置为1</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> di<span class="token punctuation">,</span> j <span class="token operator">+</span> dj<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 把当前的位置添加到栈里面</span>                <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 如果所有的点都不可走</span>            stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 退回上一步</span>    <span class="token keyword">return</span> stack  <span class="token comment" spellcheck="true"># 如果迷宫不能走则返回空栈</span>Maze <span class="token operator">=</span> initMaze<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 初始化迷宫</span>result <span class="token operator">=</span> path<span class="token punctuation">(</span>maze<span class="token operator">=</span>Maze<span class="token punctuation">,</span> start<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 老鼠开始走迷宫</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [(1, 1), (1, 2), (2, 2), (3, 2), (3, 1), (4, 1), (5, 1), (5, 2), (5, 3), (4, 3), (4, 4), (4, 5), (5, 5)]</span></code></pre><h3 id="后缀表达式求值"><a href="#后缀表达式求值" class="headerlink" title="后缀表达式求值"></a>后缀表达式求值</h3><p><strong>题目</strong></p><p>计算一个表达式时，编译器通常使用后缀表达式，这种表达式不需要括号：</p><table><thead><tr><th>中缀表达式</th><th>后缀表达式</th></tr></thead><tbody><tr><td>2 + 3 * 4</td><td>2 3 4 * +</td></tr><tr><td>( 1 + 2 ) * ( 6 / 3 ) + 2</td><td>1 2 + 6 3 / * 2 +</td></tr><tr><td>18 / ( 3 * ( 1 + 2 ) )</td><td>18 3 1 2 + * /</td></tr></tbody></table><p>编写程序实现后缀表达式求值函数。</p><p><strong>思路</strong></p><ol><li>建立一个栈来存储待计算的操作数；</li><li>遍历字符串，遇到操作数则压入栈中，遇到操作符号则出栈操作数(n次)，进行相应的计算，计算结果是新的操作数压回栈中，等待计算</li><li>按上述过程，遍历完整个表达式，栈中只剩下最终结果；</li></ol><p><strong>解决代码</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/use/bin/env python</span><span class="token comment" spellcheck="true"># _*_ coding:utf-8 _*_</span>operators <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true"># 运算符操作表</span>    <span class="token string">'+'</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> op1<span class="token punctuation">,</span> op2<span class="token punctuation">:</span> op1 <span class="token operator">+</span> op2<span class="token punctuation">,</span>    <span class="token string">'-'</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> op1<span class="token punctuation">,</span> op2<span class="token punctuation">:</span> op1 <span class="token operator">-</span> op2<span class="token punctuation">,</span>    <span class="token string">'*'</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> op1<span class="token punctuation">,</span> op2<span class="token punctuation">:</span> op1 <span class="token operator">*</span> op2<span class="token punctuation">,</span>    <span class="token string">'/'</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> op1<span class="token punctuation">,</span> op2<span class="token punctuation">:</span> op1 <span class="token operator">/</span> op2<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">evalPostfix</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :param e: 后缀表达式    :return: 正常情况下栈内的第一个元素就是计算好之后的值    """</span>    tokens <span class="token operator">=</span> e<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 把传过来的后缀表达式切分成列表</span>    stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> token <span class="token keyword">in</span> tokens<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 迭代列表中的元素</span>        <span class="token keyword">if</span> token<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 如果当前元素是数字</span>            stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>int<span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 就追加到栈里边</span>        <span class="token keyword">elif</span> token <span class="token keyword">in</span> operators<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 如果当前元素是操作符</span>            f <span class="token operator">=</span> operators<span class="token punctuation">[</span>token<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 获取运算符操作表中对应的lambda表达式</span>            op2 <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 根据先进后出的原则，先让第二个元素出栈</span>            op1 <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 在让第一个元素出栈</span>            stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>f<span class="token punctuation">(</span>op1<span class="token punctuation">,</span> op2<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 把计算的结果在放入到栈内</span>    <span class="token keyword">return</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 返回栈内的第一个元素</span>result <span class="token operator">=</span> evalPostfix<span class="token punctuation">(</span><span class="token string">'2 3 4 * +'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 14</span></code></pre><h3 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h3><p><strong>题目</strong></p><p>有一个背包能装10kg的物品，现在有6件物品分别为：</p><table><thead><tr><th>物品名称</th><th>重量</th></tr></thead><tbody><tr><td>物品0</td><td>1kg</td></tr><tr><td>物品1</td><td>8kg</td></tr><tr><td>物品2</td><td>4kg</td></tr><tr><td>物品3</td><td>3kg</td></tr><tr><td>物品4</td><td>5kg</td></tr><tr><td>物品5</td><td>2kg</td></tr></tbody></table><p>编写找出所有能将背包装满的解，如物品1+物品5。</p><p><strong>解决代码</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/use/bin/env python</span><span class="token comment" spellcheck="true"># _*_ coding:utf-8 _*_</span><span class="token keyword">def</span> <span class="token function">knapsack</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :param t: 背包总容量    :param w: 物品重量列表    :return:    """</span>    n <span class="token operator">=</span> len<span class="token punctuation">(</span>w<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 可选的物品数量</span>    stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 创建一个栈</span>    k <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true"># 当前所选择的物品游标</span>    <span class="token keyword">while</span> stack <span class="token operator">or</span> k <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 栈不为空或者k&lt;n</span>        <span class="token keyword">while</span> t <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">and</span> k <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 还有剩余空间并且有物品可装</span>            <span class="token keyword">if</span> t <span class="token operator">>=</span> w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 剩余空间大于等于当前物品重量</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>k<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 把物品装备背包</span>                t <span class="token operator">-=</span> w<span class="token punctuation">[</span>k<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 背包空间减少</span>            k <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true"># 继续向后找</span>        <span class="token keyword">if</span> t <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 找到了解</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 回退过程</span>        k <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 把最后一个物品拿出来</span>        t <span class="token operator">+=</span> w<span class="token punctuation">[</span>k<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 背包总容量加上w[k]</span>        k <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true"># 装入下一个物品</span>knapsack<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""[0, 2, 3, 5][0, 2, 4][1, 5][3, 4, 5]"""</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask核心笔记</title>
      <link href="/2018/11/07/flask-he-xin-bi-ji/"/>
      <url>/2018/11/07/flask-he-xin-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="flask核心知识点"><a href="#flask核心知识点" class="headerlink" title="flask核心知识点"></a>flask核心知识点</h1><h4 id="flask的上下文对象"><a href="#flask的上下文对象" class="headerlink" title="flask的上下文对象"></a>flask的上下文对象</h4><p>flask有两种Context(上下文)，分别是</p><ul><li>RequestContext   请求上下文</li><li>Request   请求的对象，封装Http请求(environ)的内容</li><li>Session 根据请求中的cookie，重新载入该访问者相关的会话信息</li><li>AppContext  程序上下文</li><li>g 处理请求时用作临时存储的对象。每次请求都会重设这个变量</li><li>current_app 当前激活程序的程序实例</li></ul><p>生命周期:</p><ul><li>current_app的生命周期最长，只要当前程序实例还在运行，都不会失效。</li><li>Request和g的生命周期为一次请求期间，当请求处理完成后，生命周期也就完结了</li><li>Session 就是传统意义上的session了。只要它还未失效(用户未关闭浏览器、没有超过设定的失效时间)，那么不同的请求会共用同样的session</li></ul><h4 id="flask处理流程"><a href="#flask处理流程" class="headerlink" title="flask处理流程"></a>flask处理流程</h4><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fryvtjc1xbj30hi0ejt93.jpg" alt="img"></p><p>第一步：创建上下文</p><p>Flask根据WSGI Server封装的请求等的信息(environ)新建RequestContext对象 和AppContext对象</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 声明对象</span><span class="token comment" spellcheck="true"># LocalStack  LocalProxy 都由Werkzeug提供</span><span class="token comment" spellcheck="true"># 我们不深究他的细节，那又是另外一个故事了，我们只需知道他的作用就行了</span><span class="token comment" spellcheck="true"># LocalStack 是栈结构，可以将对象推入、弹出</span><span class="token comment" spellcheck="true"># 也可以快速拿到栈顶对象。当然，所有的修改都只在本线程可见。</span>_request_ctx_stack <span class="token operator">=</span> LocalStack<span class="token punctuation">(</span><span class="token punctuation">)</span>_app_ctx_stack <span class="token operator">=</span> LocalStack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 如果调用一个LocalStack实例， 能返回一个 LocalProxy 对象</span><span class="token comment" spellcheck="true"># 这个对象始终指向 这个LocalStack实例的栈顶元素。</span><span class="token comment" spellcheck="true"># 如果栈顶元素不存在，访问这个 LocalProxy 的时候会抛出 RuntimeError异常</span><span class="token comment" spellcheck="true"># LocalProxy对象你只需暂时理解为栈里面的元素即可了</span>current_app <span class="token operator">=</span> LocalProxy<span class="token punctuation">(</span>_find_app<span class="token punctuation">)</span>request <span class="token operator">=</span> LocalProxy<span class="token punctuation">(</span>partial<span class="token punctuation">(</span>_lookup_req_object<span class="token punctuation">,</span> <span class="token string">'request'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>session <span class="token operator">=</span> LocalProxy<span class="token punctuation">(</span>partial<span class="token punctuation">(</span>_lookup_req_object<span class="token punctuation">,</span> <span class="token string">'session'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>g <span class="token operator">=</span> LocalProxy<span class="token punctuation">(</span>partial<span class="token punctuation">(</span>_lookup_app_object<span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># RequestContext</span><span class="token keyword">class</span> <span class="token class-name">RequestContext</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> app<span class="token punctuation">,</span> environ<span class="token punctuation">,</span> request<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>app <span class="token operator">=</span> app            <span class="token keyword">if</span> request <span class="token keyword">is</span> None<span class="token punctuation">:</span>                        request <span class="token operator">=</span> app<span class="token punctuation">.</span>request_class<span class="token punctuation">(</span>environ<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>request <span class="token operator">=</span> request            self<span class="token punctuation">.</span>url_adapter <span class="token operator">=</span> app<span class="token punctuation">.</span>create_url_adapter<span class="token punctuation">(</span>self<span class="token punctuation">.</span>request<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>flashes <span class="token operator">=</span> None            self<span class="token punctuation">.</span>session <span class="token operator">=</span> None</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#AppContext</span><span class="token keyword">class</span> <span class="token class-name">AppContext</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> app<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>app <span class="token operator">=</span> app            self<span class="token punctuation">.</span>url_adapter <span class="token operator">=</span> app<span class="token punctuation">.</span>create_url_adapter<span class="token punctuation">(</span>None<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>g <span class="token operator">=</span> app<span class="token punctuation">.</span>app_ctx_globals_class<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>_refcnt <span class="token operator">=</span> <span class="token number">0</span></code></pre><p>这里需要注意的是，RequestContext在初始化的时候，当前Flask的实例作为参数被传进来。虽然每次的请求处理都会创建一个RequestContext对象，但是每一次传入的app参数却是同一个。通过这个机制，可以使得：</p><blockquote><p>由同一个Flask实例所创建的RequestContext, 其成员变量app都是同一个Flask实例对象。实现了多个RequestContext对应同一个 current_app 目的</p></blockquote><ul><li><p>第二步：入栈</p><p>将RequestContext对象push进_request_ctx_stack里面。在这次请求期间，访问request对象， session对象将指向这个栈的栈顶元素</p></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RequestContext</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>           <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        _app_ctx_stack<span class="token punctuation">.</span>push<span class="token punctuation">(</span>self<span class="token punctuation">)</span>           appcontext_pushed<span class="token punctuation">.</span>send<span class="token punctuation">(</span>self<span class="token punctuation">.</span>app<span class="token punctuation">)</span></code></pre><p>AppContext对象push进_app_ctx_stack里面。在这次请求期间， 访问g对象将指向这个栈的栈顶元素</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">AppContext</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>           <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        _request_ctx_stack<span class="token punctuation">.</span>push<span class="token punctuation">(</span>self<span class="token punctuation">)</span></code></pre><ul><li><p>第三步:请求分发</p><pre class=" language-python"><code class="language-python">response <span class="token operator">=</span> self<span class="token punctuation">.</span>full_dispatch_request<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>Flask将调用<code>full_dispatch_request</code>函数进行请求的分发，之所以不用给参数，是因为我们可以通过<code>request</code>对象获得这次请求的消息。 <code>full_dispatch_request</code>  将根据请求的url找到对应的蓝本里面的视图函数，并生成一个<code>response</code>对象。注意的是在请求之外的时间，访问request对象是无效的，因为request对象依赖请求期间的<code>_request_ctx_stack</code>栈。</p></li><li><p>第四步： 上下文对象出栈</p><p>这次HTTP的响应已经生成了，就不需要两个上下文对象了。分别将两个上下文对象出栈，为下一次的HTTP请求做出准备。</p></li><li><p>第五步：响应WSGI</p><p>调用Response对象，向WSGI Server返回其结果作为HTTP中文。Response对象是一个可调用对象，当调用发生的时，将首先执行的WSGI服务器传入的start_response()函数 发送验证码和HTTP报文头。</p></li></ul><p>最后附上Flask处理请求的wsgi_app函数</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># environ: WSGI Server封装的HTTP请求信息</span><span class="token comment" spellcheck="true"># start_response: WSGI Server提供的函数，调用可以发送状态码和HTTP报文头</span><span class="token keyword">def</span> <span class="token function">wsgi_app</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> environ<span class="token punctuation">,</span> start_response<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 根据environ创建上下文</span>    ctx <span class="token operator">=</span> self<span class="token punctuation">.</span>request_context<span class="token punctuation">(</span>environ<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 把当前的request context,app context绑定到当前的context</span>    ctx<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token punctuation">)</span>    error <span class="token operator">=</span> None    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#根据请求的URL，分发请求，经过视图函数处理后返回响应对象</span>            response <span class="token operator">=</span> self<span class="token punctuation">.</span>full_dispatch_request<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                    error <span class="token operator">=</span> e                    response <span class="token operator">=</span> self<span class="token punctuation">.</span>make_response<span class="token punctuation">(</span>self<span class="token punctuation">.</span>handle_exception<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token keyword">return</span> response<span class="token punctuation">(</span>environ<span class="token punctuation">,</span> start_response<span class="token punctuation">)</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>           <span class="token keyword">if</span> self<span class="token punctuation">.</span>should_ignore_error<span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">:</span>                  error <span class="token operator">=</span> None           <span class="token comment" spellcheck="true"># 最后出栈</span>        ctx<span class="token punctuation">.</span>auto_pop<span class="token punctuation">(</span>error<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python itertools指南</title>
      <link href="/2018/07/16/python-itertools-zhi-nan/"/>
      <url>/2018/07/16/python-itertools-zhi-nan/</url>
      
        <content type="html"><![CDATA[<p>那些<code>迭代</code>比你想象中的更为强大。</p><h2 id="什么是迭代？"><a href="#什么是迭代？" class="headerlink" title="什么是迭代？"></a>什么是迭代？</h2><p>简单的说，迭代是可以被<code>for</code>循环使用的数据类型，Python中常见的迭代器是列表。</p><pre class=" language-python"><code class="language-python">colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">]</span></code></pre><p>在上面的例子中，我们创建了一个字符串列表，我们已经给这个列表命名为<code>colors</code>。</p><p>我们可以使用<code>for</code>循环来迭代，下面的的列表中将输出列表中的每一个元素。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> color <span class="token keyword">in</span> colors<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span></code></pre><p>Python中有许多不同种类的迭代，但是在本教程中，我们将使用列表。</p><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><p>我们必须导入该<code>itertools</code>模块才能使用它，我们还将导入<code>operator</code>模块。</p><p>以下所有示例将包含这些导入。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> itertools<span class="token keyword">import</span> operator</code></pre><h2 id="itertools"><a href="#itertools" class="headerlink" title="itertools"></a>itertools</h2><h3 id="accumulate"><a href="#accumulate" class="headerlink" title="accumulate()"></a>accumulate()</h3><pre class=" language-python"><code class="language-python">itertools<span class="token punctuation">.</span>accumulate（iterable <span class="token punctuation">[</span>，func<span class="token punctuation">]</span>）</code></pre><p>该函数会返回函数结果的迭代器，函数可以是变量来传递。<code>accumulate()</code>函数将一个函数作为参数。它也需要一个迭代。它返回所有的结果，结果本身包含在一个迭代器中。</p><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python">data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>accumulate<span class="token punctuation">(</span>data<span class="token punctuation">,</span> operator<span class="token punctuation">.</span>mul<span class="token punctuation">)</span><span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span></code></pre><ul><li>Example</li></ul><pre><code>12624120</code></pre><p><code>operator.mul</code>需要两个数字并乘以它们</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> operator<span class="token operator">>></span><span class="token operator">></span> operator<span class="token punctuation">.</span>mul<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> operator<span class="token punctuation">.</span>mul<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token number">6</span><span class="token operator">>></span><span class="token operator">></span> operator<span class="token punctuation">.</span>mul<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token number">24</span><span class="token operator">>></span><span class="token operator">></span> operator<span class="token punctuation">.</span>mul<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token number">120</span></code></pre><p>在下一个例子中将会使用该<code>max</code>功能</p><ul><li>Example</li></ul><pre class=" language-bash"><code class="language-bash">data <span class="token operator">=</span> <span class="token punctuation">[</span>5, 2, 6, 4, 5, 9, 1<span class="token punctuation">]</span>result <span class="token operator">=</span> itertools.accumulate<span class="token punctuation">(</span>data, max<span class="token punctuation">)</span><span class="token keyword">for</span> each <span class="token keyword">in</span> result:    print<span class="token punctuation">(</span>each<span class="token punctuation">)</span></code></pre><ul><li>Example</li></ul><pre><code>5 5 6 6 6 9 9</code></pre><p>该<code>max</code>函数返回最大的项</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> max<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token number">5</span><span class="token operator">>></span><span class="token operator">></span> max<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token number">6</span><span class="token operator">>></span><span class="token operator">></span> max<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token number">6</span><span class="token operator">>></span><span class="token operator">></span> max<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token number">6</span><span class="token operator">>></span><span class="token operator">></span> max<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token number">9</span><span class="token operator">>></span><span class="token operator">></span> max<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token number">9</span></code></pre><p>传递函数是可选的</p><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python">data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>accumulate<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span></code></pre><ul><li>Output</li></ul><pre><code>5 7 13 17 22 31 32</code></pre><p>如果没有指定功能，项目将相加。</p><pre><code>5 5 + 2 = 7 7 + 6 = 13 13 + 4 = 17 17 + 5 = 22 22 + 9 = 31 31 + 1 = 32</code></pre><h3 id="count"><a href="#count" class="headerlink" title="count()"></a>count()</h3><pre class=" language-python"><code class="language-python">itertools<span class="token punctuation">.</span>count<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> step<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><p>迭代器每次返回<code>start+step</code>的值</p><ul><li>Example</li></ul><p>返回<code>1-10</code>之间的所有奇数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre><ul><li>Output</li></ul><pre><code>13579</code></pre><h3 id="cycle"><a href="#cycle" class="headerlink" title="cycle()"></a>cycle()</h3><pre class=" language-python"><code class="language-python">itertools<span class="token punctuation">.</span>cycle<span class="token punctuation">(</span>iterable<span class="token punctuation">)</span></code></pre><p>无限循环迭代器中的每一个元素</p><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python">colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'violet'</span><span class="token punctuation">]</span><span class="token keyword">for</span> color <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>cycle<span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span></code></pre><p>在上面的代码中，我们创建一个列表，然后我们循环或循环遍历这个列表。通常，一个<code>for</code>循环逐步循环，直到它到达结束。如果一个列表有<code>3</code>个项目，循环将重复3次。但是如果我们使用这个<code>cycle()</code>功能的话。当我们到达迭代的结束时，我们从一开始就重新开始。</p><ul><li>Output</li></ul><pre><code>redorangeyellowgreenblueindigovioletredorangeyellowgreen...</code></pre><h3 id="repeat"><a href="#repeat" class="headerlink" title="repeat()"></a>repeat()</h3><pre class=" language-python"><code class="language-python">itertools<span class="token punctuation">.</span>repeat<span class="token punctuation">(</span>object<span class="token punctuation">[</span><span class="token punctuation">,</span> times<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>此功能将一遍又一遍地重复一个对象，除非有一个<code>times</code>次数。</p><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>repeat<span class="token punctuation">(</span><span class="token string">"spam"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre><p>在上面的代码中，我们创建一个可重复的迭代<code>spam</code>，它会不停地循环输出<code>spam</code></p><ul><li>Output</li></ul><pre><code>spamspamspamspamspamspam...</code></pre><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>repeat<span class="token punctuation">(</span><span class="token string">"spam"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre><p>如果我们使用<code>times</code>参数，可以限制它将重复的次数。</p><ul><li>Output</li></ul><pre><code>spamspamspam</code></pre><p>在这个例子中，<code>spam</code>只重复三次</p><h3 id="chain"><a href="#chain" class="headerlink" title="chain()"></a>chain()</h3><pre class=" language-python"><code class="language-python">itertools<span class="token punctuation">.</span>chain<span class="token punctuation">(</span><span class="token operator">*</span>iterables<span class="token punctuation">)</span></code></pre><p>此函数需要一系列迭代，并将其返回为一个长的迭代。</p><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python">colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span>shapes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'circle'</span><span class="token punctuation">,</span> <span class="token string">'triangle'</span><span class="token punctuation">,</span> <span class="token string">'square'</span><span class="token punctuation">,</span> <span class="token string">'pentagon'</span><span class="token punctuation">]</span>result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>chain<span class="token punctuation">(</span>colors<span class="token punctuation">,</span> shapes<span class="token punctuation">)</span><span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span></code></pre><ul><li>Output</li></ul><pre><code>redorangeyellowgreenbluecircletrianglesquarepentagon</code></pre><h3 id="compress"><a href="#compress" class="headerlink" title="compress()"></a>compress()</h3><pre class=" language-python"><code class="language-python">itertools<span class="token punctuation">.</span>compress<span class="token punctuation">(</span>data<span class="token punctuation">,</span> selectors<span class="token punctuation">)</span></code></pre><p>这个函数可以使用另一个过滤器来迭代</p><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python">shapes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'circle'</span><span class="token punctuation">,</span> <span class="token string">'triangle'</span><span class="token punctuation">,</span> <span class="token string">'square'</span><span class="token punctuation">,</span> <span class="token string">'pentagon'</span><span class="token punctuation">]</span>selections <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">]</span>result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>compress<span class="token punctuation">(</span>shapes<span class="token punctuation">,</span> selections<span class="token punctuation">)</span><span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span></code></pre><ul><li>Output</li></ul><pre><code>circlesquare</code></pre><h3 id="dropwhile"><a href="#dropwhile" class="headerlink" title="dropwhile()"></a>dropwhile()</h3><pre class=" language-python"><code class="language-python">itertools<span class="token punctuation">.</span>dropwhile<span class="token punctuation">(</span>predicate<span class="token punctuation">,</span> iterable<span class="token punctuation">)</span></code></pre><p>做一个迭代器，只要返回为<code>true</code>，就从<code>iterable</code>中删除元素，否则就返回后面的每个元素</p><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python">data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>dropwhile<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span></code></pre><ul><li>Output</li></ul><pre><code>56789101</code></pre><p>好。这可以令人困惑 代码说，当项目小于5时，删除每个项目。遇到不少于5的项目后，返回剩下的项目。这就是为什么最后一个被归还。</p><ul><li>Step Through It</li></ul><pre><code>1 &lt; 5:  True,  drop2 &lt; 5:  True,  drop3 &lt; 5:  True,  drop4 &lt; 5:  True,  drop5 &lt; 5:  False, return surviving items</code></pre><h3 id="groupby"><a href="#groupby" class="headerlink" title="groupby()"></a>groupby()</h3><pre class=" language-python"><code class="language-python">itertools<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> key<span class="token operator">=</span>None<span class="token punctuation">)</span></code></pre><p>简单地说，这个功能将事情集中在一起</p><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python">robots <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'blaster'</span><span class="token punctuation">,</span>        <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'autobot'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'galvatron'</span><span class="token punctuation">,</span>        <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'decepticon'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'jazz'</span><span class="token punctuation">,</span>        <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'autobot'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'metroplex'</span><span class="token punctuation">,</span>        <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'autobot'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'megatron'</span><span class="token punctuation">,</span>        <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'decepticon'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'starcream'</span><span class="token punctuation">,</span>        <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'decepticon'</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">for</span> key<span class="token punctuation">,</span> group <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>robots<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">'faction'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>Output</li></ul><pre><code>autobot[{&#39;name&#39;: &#39;blaster&#39;, &#39;faction&#39;: &#39;autobot&#39;}]decepticon[{&#39;name&#39;: &#39;galvatron&#39;, &#39;faction&#39;: &#39;decepticon&#39;}]autobot[{&#39;name&#39;: &#39;jazz&#39;, &#39;faction&#39;: &#39;autobot&#39;}, {&#39;name&#39;: &#39;metroplex&#39;, &#39;faction&#39;: &#39;autobot&#39;}]decepticon[{&#39;name&#39;: &#39;megatron&#39;, &#39;faction&#39;: &#39;decepticon&#39;}, {&#39;name&#39;: &#39;starcream&#39;, &#39;faction&#39;: &#39;decepticon&#39;}]</code></pre><h3 id="filterfalse"><a href="#filterfalse" class="headerlink" title="filterfalse()"></a>filterfalse()</h3><pre class=" language-python"><code class="language-python">itertools<span class="token punctuation">.</span>filterfalse<span class="token punctuation">(</span>predicate<span class="token punctuation">,</span> iterable<span class="token punctuation">)</span></code></pre><p>这个函数使迭代器从<code>iterable</code>中过滤元素，只返回的元素<code>False</code></p><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python">data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>filterfalse<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span></code></pre><ul><li>Output</li></ul><pre><code>5678910</code></pre><ul><li>Debug</li></ul><pre><code>1 &lt; 5:  True,  drop2 &lt; 5:  True,  drop3 &lt; 5:  True,  drop4 &lt; 5:  True,  drop5 &lt; 5:  False, keep6 &lt; 5:  False, keep7 &lt; 5:  False, keep8 &lt; 5:  False, keep9 &lt; 5:  False, keep10 &lt; 5:  False, keep1 &lt; 5:  True,  drop</code></pre><h3 id="islice"><a href="#islice" class="headerlink" title="islice()"></a>islice()</h3><pre class=" language-python"><code class="language-python">itertools<span class="token punctuation">.</span>islice<span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> start<span class="token punctuation">,</span> stop<span class="token punctuation">[</span><span class="token punctuation">,</span> step<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>这个功能非常像切片，此功能允许您剪切一个可迭代的片段</p><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python">colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span>few_colors <span class="token operator">=</span> itertools<span class="token punctuation">.</span>islice<span class="token punctuation">(</span>colors<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">for</span> each <span class="token keyword">in</span> few_colors<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span></code></pre><ul><li>Output</li></ul><pre><code>redorange</code></pre><h3 id="starmap"><a href="#starmap" class="headerlink" title="starmap()"></a>starmap()</h3><pre class=" language-python"><code class="language-python">itertools<span class="token punctuation">.</span>starmap<span class="token punctuation">(</span>function<span class="token punctuation">,</span> iterable<span class="token punctuation">)</span></code></pre><p>此函数使迭代器使用从<code>iterable</code>获取的参数来计算函数</p><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python">data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>starmap<span class="token punctuation">(</span>operator<span class="token punctuation">.</span>mul<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span></code></pre><ul><li>Output</li></ul><pre><code>123221</code></pre><ul><li>Step Through</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> operator<span class="token punctuation">.</span>mul<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token number">12</span><span class="token operator">>></span><span class="token operator">></span> operator<span class="token punctuation">.</span>mul<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token number">32</span><span class="token operator">>></span><span class="token operator">></span> operator<span class="token punctuation">.</span>mul<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token number">21</span></code></pre><h3 id="tee"><a href="#tee" class="headerlink" title="tee()"></a>tee()</h3><pre class=" language-python"><code class="language-python">itertools<span class="token punctuation">.</span>tee<span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre><p>从单个迭代中返回<code>n</code>个独立迭代器</p><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python">colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span>alpha_colors<span class="token punctuation">,</span> beta_colors <span class="token operator">=</span> itertools<span class="token punctuation">.</span>tee<span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token keyword">for</span> each <span class="token keyword">in</span> alpha_colors<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token keyword">for</span> each <span class="token keyword">in</span> beta_colors<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span></code></pre><p>默认值为2，但您可以根据需要进行许多操作。</p><ul><li>Output</li></ul><pre><code>redorangeyellowgreenblue..redorangeyellowgreenblue</code></pre><h3 id="takewhile"><a href="#takewhile" class="headerlink" title="takewhile()"></a>takewhile()</h3><pre class=" language-python"><code class="language-python">itertools<span class="token punctuation">.</span>takwwhile<span class="token punctuation">(</span>predicate<span class="token punctuation">,</span> iterable<span class="token punctuation">)</span></code></pre><p>这是相反的<code>dropwhile()</code>，只要返回为<code>true</code>，该函数就可以使用迭代器并从<code>iterable</code>返回元素</p><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python">data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>takewhile<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span></code></pre><ul><li>Output</li></ul><pre><code>1234</code></pre><ul><li>Step Through It</li></ul><pre><code>1 &lt; 5:  True,  keep going2 &lt; 5:  True,   keep going3 &lt; 5:  True,   keep going4 &lt; 5:  True,   keep going5 &lt; 5:  False, stop and drop</code></pre><h3 id="zip-longest"><a href="#zip-longest" class="headerlink" title="zip_longest()"></a>zip_longest()</h3><pre class=" language-python"><code class="language-python">itertools<span class="token punctuation">.</span>zip_longest<span class="token punctuation">(</span><span class="token operator">*</span>iterables<span class="token punctuation">,</span> fillvalue<span class="token operator">=</span>None<span class="token punctuation">)</span></code></pre><p>此函数使迭代器聚合每个迭代的元素，如果迭代长度不均匀，则缺少的值将被填充为<code>fillvalue</code>。迭代继续，直到最长的迭代耗尽。</p><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python">colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token keyword">for</span> each <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>zip_longest<span class="token punctuation">(</span>colors<span class="token punctuation">,</span> data<span class="token punctuation">,</span> fillvalue<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span></code></pre><ul><li>Output</li></ul><pre><code>(&#39;red&#39;, 1)(&#39;orange&#39;, 2)(&#39;yellow&#39;, 3)(&#39;green&#39;, 4)(&#39;blue&#39;, 5)(None, 6)(None, 7)(None, 8)(None, 9)(None, 10)</code></pre><h3 id="product"><a href="#product" class="headerlink" title="product()"></a>product()</h3><p>此函数从一系列迭代创建<a href="https://en.wikipedia.org/wiki/Cartesian_product" target="_blank" rel="noopener">笛卡尔乘积</a>。</p><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python">num_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>alpha_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>product<span class="token punctuation">(</span>num_data<span class="token punctuation">,</span> alpha_data<span class="token punctuation">)</span><span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span></code></pre><ul><li>Output</li></ul><pre><code>(1, &#39;a&#39;)(1, &#39;b&#39;)(1, &#39;c&#39;)(2, &#39;a&#39;)(2, &#39;b&#39;)(2, &#39;c&#39;)(3, &#39;a&#39;)(3, &#39;b&#39;)(3, &#39;c&#39;)</code></pre><p>想象一下这样的桌子：</p><pre><code>      a     b      c1     a1    b1     c12     a2    b2     c33     a3    b3     b3</code></pre><h3 id="permutations"><a href="#permutations" class="headerlink" title="permutations()"></a>permutations()</h3><pre class=" language-python"><code class="language-python">itertools<span class="token punctuation">.</span>permutations<span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> r<span class="token operator">=</span>None<span class="token punctuation">)</span></code></pre><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python">alpha_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>permutations<span class="token punctuation">(</span>alpha_data<span class="token punctuation">)</span><span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span></code></pre><ul><li>Output</li></ul><pre><code>(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)(&#39;a&#39;, &#39;c&#39;, &#39;b&#39;)(&#39;b&#39;, &#39;a&#39;, &#39;c&#39;)(&#39;b&#39;, &#39;c&#39;, &#39;a&#39;)(&#39;c&#39;, &#39;a&#39;, &#39;b&#39;)(&#39;c&#39;, &#39;b&#39;, &#39;a&#39;)</code></pre><h3 id="combinations"><a href="#combinations" class="headerlink" title="combinations()"></a>combinations()</h3><pre class=" language-python"><code class="language-python">itertools<span class="token punctuation">.</span>combinations<span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> r<span class="token punctuation">)</span></code></pre><p>此函数需要一个迭代和一个整数，这将创建具有<code>r</code>成员的所有独特组合。</p><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python">shapes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'circle'</span><span class="token punctuation">,</span> <span class="token string">'triangle'</span><span class="token punctuation">,</span> <span class="token string">'square'</span><span class="token punctuation">,</span> <span class="token punctuation">]</span>result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>combinations<span class="token punctuation">(</span>shapes<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span></code></pre><p>在这段代码中，我们使用2个成员组合所有组合。</p><ul><li>Output</li></ul><pre><code>（&#39;circle&#39;，&#39;triangle&#39;）（&#39;circle&#39;，&#39;square&#39;）（&#39;triangle&#39;，&#39;square&#39;）</code></pre><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python">result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>combinations<span class="token punctuation">(</span>shapes<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span></code></pre><p>在这段代码中，我们使用3个成员组合所有组合。这有点不太令人兴奋。</p><ul><li>Output</li></ul><pre><code>(&#39;circle&#39;, &#39;triangle&#39;, &#39;square&#39;)</code></pre><h3 id="combinations-with-replacement"><a href="#combinations-with-replacement" class="headerlink" title="combinations_with_replacement()"></a>combinations_with_replacement()</h3><pre class=" language-python"><code class="language-python">itertools<span class="token punctuation">.</span>combinations_with_replacement<span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> r<span class="token punctuation">)</span></code></pre><p>这一个就像<code>combinations()</code>功能一样，但是这个可以让单个元素重复一次。</p><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python">shapes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'circle'</span><span class="token punctuation">,</span> <span class="token string">'triangle'</span><span class="token punctuation">,</span> <span class="token string">'square'</span><span class="token punctuation">,</span> <span class="token punctuation">]</span>result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>combinations_with_replacement<span class="token punctuation">(</span>shapes<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span></code></pre><ul><li>Output</li></ul><pre><code>(&#39;circle&#39;, &#39;circle&#39;)(&#39;circle&#39;, &#39;triangle&#39;)(&#39;circle&#39;, &#39;square&#39;)(&#39;triangle&#39;, &#39;triangle&#39;)(&#39;triangle&#39;, &#39;square&#39;)(&#39;square&#39;, &#39;square&#39;)</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django部署指南</title>
      <link href="/2018/07/07/django-bu-shu-bi-ji/"/>
      <url>/2018/07/07/django-bu-shu-bi-ji/</url>
      
        <content type="html"><![CDATA[<h5 id="本地环境-mac-os-连接远程软件-ssh-shell-服务器系统-centos-7"><a href="#本地环境-mac-os-连接远程软件-ssh-shell-服务器系统-centos-7" class="headerlink" title="本地环境 mac os  连接远程软件 ssh shell   服务器系统 centos 7"></a>本地环境 mac os  连接远程软件 ssh shell   服务器系统 centos 7</h5><h5 id="一-：安装-python3-6"><a href="#一-：安装-python3-6" class="headerlink" title="一 ：安装 python3.6"></a>一 ：安装 python3.6</h5><pre><code>wget https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tgz</code></pre><p> 解压缩</p><pre><code>tar -xzvf Python-3.6.2.tgz -C  /tmp</code></pre><p> cd到指定目录</p><pre class=" language-python"><code class="language-python">cd  <span class="token operator">/</span>tmp<span class="token operator">/</span>Python<span class="token number">-3.6</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token operator">/</span></code></pre><pre class=" language-python"><code class="language-python">把Python3<span class="token number">.6</span>安装到 <span class="token operator">/</span>usr<span class="token operator">/</span>local 目录</code></pre><pre class=" language-python"><code class="language-python"><span class="token punctuation">.</span><span class="token operator">/</span>configure <span class="token operator">-</span><span class="token operator">-</span>prefix<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local  有几率出现configure<span class="token punctuation">:</span> error<span class="token punctuation">:</span> <span class="token keyword">in</span> `<span class="token operator">/</span>tmp<span class="token operator">/</span>Python<span class="token number">-3.6</span><span class="token punctuation">.</span><span class="token number">2</span>'<span class="token punctuation">:</span>configure<span class="token punctuation">:</span> error<span class="token punctuation">:</span> no acceptable C compiler found <span class="token keyword">in</span> $PATHSee `config<span class="token punctuation">.</span>log' <span class="token keyword">for</span> more details 此种错误<span class="token comment" spellcheck="true">#由于本机缺少gcc编译环境 请运行  yum install -y gcc</span></code></pre><pre class=" language-python"><code class="language-python">make</code></pre><pre class=" language-python"><code class="language-python">make altinstall  <span class="token punctuation">(</span>altinstall在安装时会区分已存在的版本<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">更改<span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>python链接ln <span class="token operator">-</span>s <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>bin<span class="token operator">/</span>python3<span class="token number">.6</span> <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>python3</code></pre><p>验证是否安装成功 出现此图则代表安装成功</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1ftr45udzsxj315q066jsr.jpg" alt="image-20180729224426236"></p><h5 id="二-：安装-mysql"><a href="#二-：安装-mysql" class="headerlink" title="二 ：安装 mysql"></a>二 ：安装 mysql</h5><p>1、先检查系统是否装有mysql</p><p>rpm -qa | grep mysql</p><p>下载mysql的repo源</p><pre class=" language-linu"><code class="language-linu"># wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm</code></pre><p>2、安装mysql-community-release-el7-5.noarch.rpm包</p><pre><code># sudo rpm -ivh mysql-community-release-el7-5.noarch.rpm</code></pre><p>3、安装mysql</p><pre><code># sudo yum install mysql-server</code></pre><p> 根据步骤安装就可以了，不过安装完成后，没有密码，需要重置密码。</p><p>安装后再次查看mysql</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1ftr4jxiqq1j30x408240q.jpg" alt="image-20180729225800704"></p><p>此处可能存在报错</p><pre><code>Error: Package: mysql-community-libs-5.6.35-2.el7.x86_64 (mysql56-community) Requires: libc.so.6(GLIBC_2.17)(64bit) Error: Package: mysql-community-server-5.6.35-2.el7.x86_64 (mysql56-community) Requires: libc.so.6(GLIBC_2.17)(64bit) Error: Package: mysql-community-server-5.6.35-2.el7.x86_64 (mysql56-community) Requires: systemd Error: Package: mysql-community-server-5.6.35-2.el7.x86_64 (mysql56-community) Requires: libstdc++.so.6(GLIBCXX_3.4.15)(64bit) Error: Package: mysql-community-client-5.6.35-2.el7.x86_64 (mysql56-community) Requires: libc.so.6(GLIBC_2.17)(64bit) You could try using --skip-broken to work around the problem You could try running: rpm -Va --nofiles --nodigest</code></pre><p>解决方法 </p><pre><code>#yum install glibc.i686# yum list libstdc++* # 本机未曾出现 只是暂时做记录</code></pre><p>4、重置密码</p><p>重置密码前，首先要登录</p><p>mysql - u root</p><blockquote><p>登录时有可能报这样的错：ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/var/lib/mysql/mysql.sock’ (2)，原因是/var/lib/mysql的访问权限问题。下面的命令把/var/lib/mysql的拥有者改为当前用户：</p></blockquote><p>解决命令</p><pre><code>sudo chown -R openscanner:openscanner /var/lib/mysql</code></pre><p>此时可能会报错误</p><p>如果报<code>chown: 无效的用户: &quot;openscanner:openscanner&quot;</code>错误，更换命令，并用 ll 查看目录权限列表</p><pre><code>chown root /var/lib/mysql/ ll命令解释：附： ① 更改文件拥有者 (chown ) [root@linux ~]# chown 账号名称 文件或目录 ② 改变文件的用户组用命令 chgrp [root@linux ~]# chgrp 组名 文件或目录 ③ 对于目录权限修改之后，默认只是修改当前级别的权限。如果子目录也要递归需要加R参数 Chown -R : 进行递归,连同子目录下的所有文件、目录</code></pre><p>重启mysql服务</p><pre><code>service mysqld restart</code></pre><p>接下来登录重置密码</p><pre class=" language-mysql"><code class="language-mysql"> mysql -u root -p</code></pre><p> 出现入下图界面则成功</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1ftr4wfyg5bj31ak0hidj9.jpg" alt="image-20180729231001119"></p><p>接下来登录重置密码：</p><pre class=" language-mysql"><code class="language-mysql">mysql -u root -pmysql > use mysql;mysql > update user set password=password('123456') where user='root';mysql > exit;</code></pre><p><strong>重启mysql服务后才生效</strong> <code># service mysqld restart</code></p><p> 必要时加入以下命令行，为root添加远程连接的能力。链接密码为 “root”（不包括双引号）</p><pre class=" language-mysql"><code class="language-mysql">mysql> GRANT ALL PRIVILEGES ON *.* TO root@"%" IDENTIFIED BY "root";　</code></pre><p>查询数据库编码格式，确保是 UTF-8</p><pre class=" language-mysql"><code class="language-mysql">show variables like "%char%";</code></pre><p>修改数据库编码</p><p>1、进入编辑my.cnf</p><pre><code>vi /etc/my.cnf</code></pre><p>2、 在[mysqld]<strong>下边</strong>添加以下内容</p><pre><code>character-set-server=utf8init_connect=&#39;SET NAMES utf8&#39;</code></pre><p>3，在[mysqld]<strong>上边</strong>添加以下内容</p><pre><code> [mysql] default-character-set=utf8</code></pre><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1ftr5foybfmj31g20mon1q.jpg" alt="image-20180729232831715"></p><p>如上图所示</p><p>重启MySQL</p><pre class=" language-mysql"><code class="language-mysql"> systemctl restart mysqld</code></pre><p>然后查看mysql编码</p><pre><code>mysql&gt; show variables like &#39;%character%&#39;;</code></pre><p>修改完成后显示结果如下：</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1ftr5iy84g0j31260gggo2.jpg" alt="image-20180729233139497"></p><h5 id="三、安装mysqlclient"><a href="#三、安装mysqlclient" class="headerlink" title="三、安装mysqlclient"></a>三、安装mysqlclient</h5><pre><code>yum install python-devel mariadb-devel -y</code></pre><pre><code>pip3 install mysqlclient然后发现没有pip命令 开始如下安装操作</code></pre><p>1、安装pip</p><p>安装依赖环境</p><pre><code>yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</code></pre><p>2.<strong>安装setuptools</strong></p><pre><code>wget --no-check-certificate  https://pypi.python.org/packages/source/s/setuptools/setuptools-19.6.tar.gz#md5=c607dd118eae682c44ed146367a17e26tar -zxvf setuptools-19.6.tar.gzcd setuptools-19.6python3 setup.py buildpython3 setup.py install #这步可能会引起下面异常</code></pre><p> 中间可能会报错如</p><pre><code>RuntimeError: Compression requires the (missing) zlib module</code></pre><pre><code>yum install zlibyum install zlib-devel</code></pre><p>安装完成后，重新编译 python3.6【不需要删除，只需要重新编译，make，安装就行了】</p><blockquote><p>(cd到原来安装python的目录 直接执行make命令)</p><p>然后在切回来这个目录 重新运行python3 setup.py install </p></blockquote><p>成功之后设置软连接</p><pre><code>ln -s /usr/local/bin/pip3.6 /usr/bin/pip3 </code></pre><p>如软链接设置错误,删除软链接命令</p><p> <strong>rm -rf /usr/bin/pip3(后面/usr/bin/pip为软链接名称,切记不能加结尾/  如:/usr/bin/pip3/则表示删除软连接及真实文件)</strong></p><p>输入pip3-V 出现入下图所示 即为安装成功</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1ftrhyi9834j314203wjsa.jpg" alt="image-20180730064148611"></p><h5 id="四、安装virtualenvwrapper"><a href="#四、安装virtualenvwrapper" class="headerlink" title="四、安装virtualenvwrapper"></a>四、安装virtualenvwrapper</h5><pre class=" language-python"><code class="language-python">yum install python<span class="token operator">-</span>setuptools python<span class="token operator">-</span>develpip install virtualenvwrapper</code></pre><p> 编辑.bashrc文件</p><pre class=" language-python"><code class="language-python">export WORKON_HOME<span class="token operator">=</span>$HOME<span class="token operator">/</span><span class="token punctuation">.</span>virtualenvssource <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>bin<span class="token operator">/</span>virtualenvwrapper<span class="token punctuation">.</span>sh</code></pre><pre><code>重新加载.bashrc文件source  ~/.bashrc新建虚拟环境mkvirtualenv test进入虚拟环境 workon test出现下图界面则代表虚拟环境创建成功</code></pre><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1ftri4lfw09j30pg028weu.jpg" alt="image-20180730064739942"></p><p>安装nginx</p><h2 id="第一步-添加Nginx存储库"><a href="#第一步-添加Nginx存储库" class="headerlink" title="第一步 - 添加Nginx存储库"></a>第一步 - 添加Nginx存储库</h2><p>要添加CentOS 7 EPEL仓库，请打开终端并使用以下命令：</p><pre><code>sudo yum install epel-release</code></pre><h2 id="第二步-安装Nginx"><a href="#第二步-安装Nginx" class="headerlink" title="第二步 - 安装Nginx"></a>第二步 - 安装Nginx</h2><p>现在Nginx存储库已经安装在您的服务器上，使用以下<code>yum</code>命令安装Nginx ：</p><pre><code>sudo yum install nginx</code></pre><p>在对提示回答yes后，Nginx将在服务器上完成安装。</p><h2 id="第三步-启动Nginx"><a href="#第三步-启动Nginx" class="headerlink" title="第三步 - 启动Nginx"></a>第三步 - 启动Nginx</h2><p>Nginx不会自行启动。要运行Nginx，请输入：</p><pre><code>sudo systemctl start nginx</code></pre><p>如果您正在运行防火墙，请运行以下命令以允许HTTP和HTTPS通信：</p><pre><code>sudo firewall-cmd --permanent --zone=public --add-service=http sudo firewall-cmd --permanent --zone=public --add-service=httpssudo firewall-cmd --reload</code></pre><p>您将会看到默认的CentOS 7 Nginx网页，这是为了提供信息和测试目的。</p><p>它应该看起来像这样：</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1ftyzikyrorj31kw0l9gpw.jpg" alt="image-20180805180811338"> </p><p> 导出本地开发环境</p><p>进入虚拟环境 </p><p>输入命令  pip freeze &gt; requirements.txt 会生成一个文件<img src="https://ws2.sinaimg.cn/large/0069RVTdgy1ftyzo5yqovj31dq02i755.jpg" alt="image-20180805181335542"></p><p>复制内容或者直接拷贝文件到服务器</p><p>进入服务器的虚拟环境 </p><p>pip install -r requirements.txt</p><p>通过第三方软件或者sftp命令把本地代码传输到远端服务器</p><p>安装uwsgi</p><p>pip install uwsgi</p><p>把本地的数据库传输到服务器 如图 一定不要勾选其他选项 防止出现失败 如下图</p><p><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1ftz0t4he6bj312m0ss449.jpg" alt="image-20180805185257398"></p><p>在服务器启动项目测试</p><p>虚拟环境：python manage.py runserver 0.0.0.0:8000 </p><p>ALLOWED_HOSTS = [‘*’]  </p><p>输入ip+端口正常访问 </p><p><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1ftz3t2waojj31kw0sznpd.jpg" alt="image-20180805203632618"></p><p>uwsgi 启动项目 </p><p>uwsgi –http :8000 –module MxOnline_py3.wsgi </p><p>一般是进入项目的根目录 –module指向 项目里面的wsgi</p><p><img src="https://ws2.sinaimg.cn/large/0069RVTdgy1ftz3wtbz34j31kw02g0te.jpg" alt="image-20180805204018588"></p><p>开启之后测试能否拉起django 项目</p><p>新建一个uc_nginx.conf文件</p><blockquote><p># the upstream component nginx needs to connect to</p><p>upstream django {</p><p># server unix:///path/to/your/mysite/mysite.sock; # for a file socket</p><p>server 127.0.0.1:8000; # for a web port socket (we’ll use this first)</p><p>}</p><p># configuration of the server</p><p>server {</p><p># the port your site will be served on</p><p>listen      80;</p><p># the domain name it will serve for</p><p>server_name etreal.xyz ; # substitute your machine’s IP address or FQDN</p><p>charset     utf-8;</p><p># max upload size</p><p>client_max_body_size 75M;   # adjust to taste</p><p># Django media</p><p>location /media  {</p><p>​    alias /MxOnline_py3/media;  # 指向django的media目录</p><p>}</p><p>location /static {</p><p>​    alias /MxOnline_py3/static; # 指向django的static目录</p><p>}</p><p># Finally, send all non-media requests to the Django server.</p><p>location / {</p><p>​    uwsgi_pass  django;</p><p>​    include     uwsgi_params; # the uwsgi_params file you installed</p><p>}</p><p>}</p></blockquote><p>server_name 可以配置ip或者域名</p><h5 id="将该配置文件加入到nginx的启动配置文件中"><a href="#将该配置文件加入到nginx的启动配置文件中" class="headerlink" title="将该配置文件加入到nginx的启动配置文件中"></a>将该配置文件加入到nginx的启动配置文件中</h5><pre><code>sudo ln -s /MxOnline_py3/uc_nginx.conf  /etc/nginx/conf.d/</code></pre><h5 id="拉取所有需要的static-file-到同一个目录"><a href="#拉取所有需要的static-file-到同一个目录" class="headerlink" title="拉取所有需要的static file 到同一个目录"></a>拉取所有需要的static file 到同一个目录</h5><pre><code>在django的setting文件中，添加下面一行内容：    STATIC_ROOT = os.path.join(BASE_DIR, &quot;static/&quot;)运行命令    python manage.py collectstatic</code></pre><p>注意 写上STATIC_ROOT 注销掉 STATICFILES_DIRS 如图</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1ftz6amuic2j316u0tsten.jpg" alt="image-20180805220244860"></p><p>在conf文件下 建立</p><pre><code>新建uwsgi.ini 配置文件， 内容如下：    # mysite_uwsgi.ini file    [uwsgi]    # Django-related settings    # the base directory (full path)    chdir           = /home/bobby/Projects/MxOnline    # Django&#39;s wsgi file    module          = MxOnline.wsgi    # the virtualenv (full path)    # process-related settings    # master    master          = true    # maximum number of worker processes    processes       = 10    # the socket (use the full path to be safe    socket          = 127.0.0.1:8000    # ... with appropriate permissions - may be needed    # chmod-socket    = 664    # clear environment on exit    vacuum          = true    virtualenv = /home/bobby/.virtualenvs/mxonline    注：    chdir： 表示需要操作的目录，也就是项目的目录    module： wsgi文件的路径    processes： 进程数    virtualenv：虚拟环境的目录</code></pre><p>uwsgi 带着配置文件启动 注意目录结构</p><p><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1ftz6vxo1ptj30ye034dgf.jpg" alt="image-20180805222316371"></p><p>此时访问域名</p><p><a href="http://etreal.xyz/" target="_blank" rel="noopener">http://etreal.xyz/</a></p><p>即可出现如图结果</p><p><img src="https://ws2.sinaimg.cn/large/0069RVTdgy1ftz6yq6r22j31kw0thnpd.jpg" alt="image-20180805222546460"></p><p>pkill -f uwsgi  自动重启并加载</p><p>pkill -f -9 uwsgi   停止wsgi </p><p>注意 setting debug 一定要改为True</p>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql语句练习</title>
      <link href="/2018/05/03/mysql-yu-ju-lian-xi/"/>
      <url>/2018/05/03/mysql-yu-ju-lian-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="mysql语句练习"><a href="#mysql语句练习" class="headerlink" title="mysql语句练习"></a>mysql语句练习</h1><p>😠此表情标注为重要练习</p><h3 id="创建表及数据"><a href="#创建表及数据" class="headerlink" title="创建表及数据"></a>创建表及数据</h3><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE STUDENT  (SNO VARCHAR(3) NOT NULL,   SNAME VARCHAR(4) NOT NULL,  SSEX VARCHAR(2) NOT NULL,   SBIRTHDAY DATE,  SCLASS VARCHAR(5))  CREATE TABLE TEACHER   (TNO VARCHAR(3) NOT NULL,   TNAME VARCHAR(4) NOT NULL, TSEX VARCHAR(2) NOT NULL,   TBIRTHDAY DATETIME NOT NULL, PROF VARCHAR(6),   DEPART VARCHAR(10) NOT NULL)  CREATE TABLE COURSE  (CNO VARCHAR(5) NOT NULL,   CNAME VARCHAR(10) NOT NULL,   TNO VARCHAR(10) NOT NULL)  CREATE TABLE SCORE   (SNO VARCHAR(3) NOT NULL,   CNO VARCHAR(5) NOT NULL,   DEGREE NUMERIC(10, 1) NOT NULL)   ALTER TABLE student  ADD CONSTRAINT primary key (sno);  ALTER TABLE course  ADD constraint primary key (cno);  ALTER TABLE score  ADD constraint primary key (sno, cno);  ALTER TABLE teacher  ADD constraint primary key (tno);  ALTER TABLE course  ADD constraint foreign key (tno) references teacher (tno);  ALTER TABLE score  ADD constraint foreign key (cno) references course (cno);  INSERT INTO STUDENT (SNO,SNAME,SSEX,SBIRTHDAY,SCLASS) VALUES (108 ,'曾华'   ,'男' ,'1977-09-01',95033);  INSERT INTO STUDENT (SNO,SNAME,SSEX,SBIRTHDAY,SCLASS) VALUES (105 ,'匡明'   ,'男' ,'1975-10-02',95031);  INSERT INTO STUDENT (SNO,SNAME,SSEX,SBIRTHDAY,SCLASS) VALUES (107 ,'王丽'   ,'女' ,'1976-01-23',95033);  INSERT INTO STUDENT (SNO,SNAME,SSEX,SBIRTHDAY,SCLASS) VALUES (101 ,'李军'   ,'男' ,'1976-02-20',95033);  INSERT INTO STUDENT (SNO,SNAME,SSEX,SBIRTHDAY,SCLASS) VALUES (109 ,'王芳'   ,'女' ,'1975-02-10',95031);  INSERT INTO STUDENT (SNO,SNAME,SSEX,SBIRTHDAY,SCLASS) VALUES (103 ,'陆君'   ,'男' ,'1974-06-03',95031);  INSERT INTO TEACHER(TNO,TNAME,TSEX,TBIRTHDAY,PROF,DEPART)   VALUES (804,'李诚','男','1958-12-02','副教授','计算机系');  INSERT INTO TEACHER(TNO,TNAME,TSEX,TBIRTHDAY,PROF,DEPART)   VALUES (856,'张旭','男','1969-03-12','讲师','电子工程系');  INSERT INTO TEACHER(TNO,TNAME,TSEX,TBIRTHDAY,PROF,DEPART)  VALUES (825,'王萍','女','1972-05-05','助教','计算机系');  INSERT INTO TEACHER(TNO,TNAME,TSEX,TBIRTHDAY,PROF,DEPART)   VALUES (831,'刘冰','女','1977-08-14','助教','电子工程系');  INSERT INTO COURSE(CNO,CNAME,TNO) VALUES ('3-105','计算机导论',825);  INSERT INTO COURSE(CNO,CNAME,TNO) VALUES ('3-245','操作系统',804);  INSERT INTO COURSE(CNO,CNAME,TNO) VALUES ('6-166','数据电路',856);  INSERT INTO COURSE(CNO,CNAME,TNO) VALUES ('9-888','高等数学',831);  INSERT INTO SCORE(SNO,CNO,DEGREE) VALUES (103,'3-245',86);  INSERT INTO SCORE(SNO,CNO,DEGREE) VALUES (105,'3-245',75);  INSERT INTO SCORE(SNO,CNO,DEGREE) VALUES (109,'3-245',68);  INSERT INTO SCORE(SNO,CNO,DEGREE) VALUES (103,'3-105',92);  INSERT INTO SCORE(SNO,CNO,DEGREE) VALUES (105,'3-105',88);  INSERT INTO SCORE(SNO,CNO,DEGREE) VALUES (109,'3-105',76);  INSERT INTO SCORE(SNO,CNO,DEGREE) VALUES (101,'3-105',64);  INSERT INTO SCORE(SNO,CNO,DEGREE) VALUES (107,'3-105',91);  INSERT INTO SCORE(SNO,CNO,DEGREE) VALUES (108,'3-105',78);  INSERT INTO SCORE(SNO,CNO,DEGREE) VALUES (101,'6-166',85);  INSERT INTO SCORE(SNO,CNO,DEGREE) VALUES (107,'6-166',79);  INSERT INTO SCORE(SNO,CNO,DEGREE) VALUES (108,'6-166',81);</code></pre><h4 id="表格数据"><a href="#表格数据" class="headerlink" title="表格数据"></a>表格数据</h4><p><img src="https://itswcg.com/images/mysql1.png" alt="img"></p><p><img src="https://itswcg.com/images/mysql2.png" alt="img"></p><p><img src="https://itswcg.com/images/mysql3.png" alt="img"></p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>1、查询Student表中的所有记录的Sname、Ssex和Class列。</p><p>回答:  SELECT SNAME, SSEX, SCLASS FROM STUDENT;</p><p>2、查询教师所有的单位即不重复的Depart列。</p><p>回答: SELECT  DISTINCT DEPART FROM TEACHER;</p><p>3、查询Student表的所有记录。</p><p>回答: SELECT * FROM STUDENT;</p><p>4、查询Score表中成绩在60到80之间的所有记录。</p><p>回答:  SELECT * FROM SCORE WHERE DEGREE BETWEEN 60 AND 80;</p><p>5、查询Score表中成绩为85，86或88的记录。</p><p>回答:  SELECT * FROM  SCORE WHERE DEGREE IN(85,86,88);</p><p>6、 查询Student表中“95031”班或性别为“女”的同学记录。</p><p>回答:  SELECT * FROM STUDENT WHERE SCLASS=’95031’ OR SSEX=’女’;</p><p>7、 以Class降序查询Student表的所有记录。 </p><p>回答： SELECT * FROM STUDENT ORDER BY SCLASS DESC;</p><p>8、 以Cno升序、Degree降序查询Score表的所有记录。 </p><p>回答： SELECT * FROM SCORE ORDER BY Cno ASC,Degree desc;</p><p>9、 查询“95031”班的学生人数。</p><p>回答:   SELECT COUNT(*) FROM STUDENT WHERE SCLASS=’95031’;</p><p>10、查询Score表中的最高分的学生学号和课程号。 </p><p>回答： SELECT SNO, CNO FROM SCORE ORDER BY DEGREE DESC LIMIT 1; SELECT SNO,CNO,DEGREE  FROM SCORE WHERE DEGREE=(SELECT MAX(DEGREE) FROM SCORE); 😠😠😠</p><p>11、查询‘3-105’号课程的平均分。 </p><p>回答:   SELECT AVG(DEGREE) FROM SCORE WHERE CNO=’3-105’;</p><p>12、查询Score表中至少有5名学生选修的并以3开头的课程的平均分数。 </p><p>回答:   SELECT CNO, AVG(Degree ) from SCORE where CNO like ‘3%’ group by CNO having COUNT(*)&gt;=5;😠😠😠</p><p> 13、查询最低分大于70，最高分小于90的Sno列。 </p><p>回答:  SELECT SNO FROM SCORE GROUP BY SNO HAVING MIN(DEGREE) &gt; 70 AND MAX(DEGREE)&lt; 90; 😠😠😠’</p><p>14、查询所有学生的Sname、Cno和Degree列。 </p><p>回答:  SELECT A.SNAME, B.CNO, B.DEGREE FROM STUDENT A JOIN SCORE B ON A.SNO=B.SNO;</p><p>15、查询所有学生的Sno、Cname和Degree列。</p><p>回答： SELECT A.SNO, B.CNAME, C.DEGREE FROM STUDENT A JOIN (COURSE B, SCORE C) ON A.SNO=C.SNO AND B.CNO=C.CNO;</p><p>16、查询所有学生的Sname、Cname和Degree列。 </p><p>回答:  SELECT A.SNAME, B.CNAME, C.DEGREE FROM STUDENT A JOIN (COURSE B, SCORE C) ON A.SNO=C.SNO AND B.CNO=C.CNO;</p><p>17、查询“95033”班所选课程的平均分。</p><p>回答：SELECT AVG(A.DEGREE) FROM SCORE A JOIN STUDENT B ON A.SNO=B.SNO WHERE B.SCLASS=’95033’ GROUP BY A.CNO; 😠😠😠</p><p> 18、假设使用如下命令建立了一个grade表： create table grade(low number(3,0),upp number(3),rank char(1)); insert into grade values(90,100,’A’); insert into grade values(80,89,’B’); insert into grade values(70,79,’C’); insert into grade values(60,69,’D’); insert into grade values(0,59,’E’); commit; </p><p>现查询所有同学的Sno、Cno和rank列。 </p><p>19、查询选修“3-105”课程的成绩高于“109”号同学成绩的所有同学的记录。 </p><p>回答:  SELECT A.* FROM SCORE A WHERE A.CNO=’3-105’ AND A.DEGREE&gt;(SELECT DEGREE FROM SCORE B WHERE B.SNO=109 AND B.CNO=’3-105’); </p><p>20、查询score中选学一门以上课程的同学中分数为非最高分成绩的记录。 </p><p>回答：SELECT * FROM SCORE WHERE DEGREE &lt; (SELECT MAX(DEGREE) FROM SCORE) GROUP BY SNO HAVING COUNT(CNO) &gt; 1; </p><p>21、查询成绩高于学号为“109”、课程号为“3-105”的成绩的所有记录 。</p><p>回答:  SELECT * FROM SCORE WHERE CNO = ‘3-105’ AND DEGREE &gt; (SELECT DEGREE FROM SCORE WHERE SNO = 109 AND CNO =’3-105’);</p><p>22、查询和学号为108的同学同年出生的所有学生的Sno、Sname和Sbirthday列。</p><p>回答：SELECT A.SNO, A.SNAME, A.SBIRTHDAY FROM STUDENT A WHERE YEAR(A.SBIRTHDAY)=(SELECT YEAR(SBIRTHDAY) FROM STUDENT B WHERE B.SNO=108); 备注 表名可以省略 A为别名</p><p>23、查询“张旭“教师任课的学生成绩。</p><p>回答：SELECT A.SNO, A.DEGREE FROM SCORE A JOIN (TEACHER B, COURSE C) ON A.CNO = C.CNO AND B.TNO=C.TNO WHERE B.TNAME=’张旭’;</p><p>24、查询选修某课程的同学人数多于5人的教师姓名。</p><p>回答：SELECT B.TNAME FROM SCORE A JOIN (TEACHER B, COURSE C) ON A.CNO=C.CNO AND B.TNO=C.TNO GROUP BY A.CNO HAVING COUNT(A.CNO) &gt;5; 😠😠😠</p><p>25、查询95033班和95031班全体学生的记录。</p><p>回答:  SELECT * FROM STUDENT WHERE SCLASS IN (95033, 95031);</p><p>26、查询存在有85分以上成绩的课程Cno.</p><p>回答：SELECT CNO FROM SCORE GROUP BY CNO HAVING MAX(DEGREE) &gt; 85;</p><p>27、查询出“计算机系“教师所教课程的成绩表。</p><p>回答:   select sno,Cno ,Degree from Score where Cno in (select Cno from Course where Tno in (select tno from Teacher where Depart=’计算机系’))</p><p>28、查询“计算机系”与“电子工程系“不同职称的教师的Tname和Prof。</p><p>回答:  SELECT TNAME, PROF FROM TEACHER WHERE DEPART = ‘计算机系’ AND PROF NOT IN (SELECT PROF FROM TEACHER WHERE DEPART=’电子工程系’);</p><p>29、查询选修编号为“3-105“课程且成绩至少高于选修编号为“3-245”的同学的Cno、Sno和Degree,并按Degree从高到低次序排序。</p><p>回答： 第一种方式 select Cno,Sno,Degree from Score a where (select Degree from Score b where Cno=’3-105’ and b.Sno=a.Sno)&gt;=(select Degree from Score c where Cno=’3-245’ and c.Sno=a.Sno) order by Degree desc;   第二种方式  select * from Score where Cno=’3-105’ and Degree &gt;any(select Degree from Score where Cno=’3-245’)</p><p>30、查询选修编号为“3-105”且成绩高于选修编号为“3-245”课程的同学的Cno、Sno和Degree.</p><p>回答：第一种方式 select Cno,Sno,Degree from Score a where (select Degree from Score b where Cno=’3-105’ and b.Sno=a.Sno)&gt;(select Degree from Score c where Cno=’3-245’ and c.Sno=a.Sno);</p><p>第二种方式 select cno,sno,degree from score where cno=’3-105’ and degree&gt;all(select degree from score where cno=’3-245’) order by degree desc</p><p> 31、查询所有教师和同学的name、sex和birthday.</p><p>回答：  SELECT SNAME AS NAME, SSEX AS SEX, SBIRTHDAY AS BIRTHDAY FROM STUDENT UNION SELECT TNAME AS NAME, TSEX AS SEX, TBIRTHDAY AS BIRTHDAY FROM TEACHER;</p><p>32、查询所有“女”教师和“女”同学的name、sex和birthday.</p><p>回答：SELECT SNAME AS NAME, SSEX AS SEX, SBIRTHDAY AS BIRTHDAY FROM STUDENT WHERE SSEX=’女’ UNION SELECT TNAME AS NAME,TSEX AS SEX, TBIRTHDAY AS BIRTHDAY FROM TEACHER WHERE TSEX=’女’;</p><p>33、查询成绩比该课程平均成绩低的同学的成绩表。</p><p>回答： SELECT A.* FROM SCORE A WHERE DEGREE &lt; (SELECT AVG(DEGREE) FROM SCORE B WHERE A.CNO=B.CNO);</p><p>34、查询所有任课教师的Tname和Depart.</p><p>回答：第一种方式：SELECT TNAME, DEPART FROM TEACHER A JOIN COURSE B ON A.TNO=B.TNO;</p><p>第二种方式:   SELECT TNAME, DEPART FROM TEACHER A WHERE EXISTS (SELECT * FROM COURSE B WHERE A.TNO=B.TNO);</p><p>第三种方式：SELECT TNAME,DEPART FROM TEACHER WHERE TNO IN (SELECT TNO FROM COURSE);</p><p>35、 查询所有未讲课的教师的Tname和Depart. </p><p>回答：第一种方式：SELECT TNAME, DEPART FROM TEACHER A WHERE NOT EXISTS (SELECT * FROM COURSE B WHERE A.TNO=B.TNO);</p><p>第二种方式： SELECT TNAME,DEPART FROM TEACHER WHERE TNO NOT IN (SELECT TNO FROM COURSE);</p><p>36、查询至少有2名男生的班号。</p><p>回答： SELECT SCLASS FROM STUDENT WHERE SSEX=’男’ GROUP BY SCLASS HAVING COUNT(SSEX)&gt;1;</p><p>37、 查询Student表中不姓“王”的同学记录。</p><p>回答： SELECT * FROM STUDENT WHERE SNAME NOT LIKE ‘王%’;</p><p>38、查询Student表中每个学生的姓名和年龄。</p><p>回答：SELECT SNAME,(YEAR(NOW())-YEAR(SBIRTHDAY)) AS AGE FROM STUDENT;</p><p>39 、查询Student表中最大和最小的Sbirthday日期值。</p><p>回答： SELECT SBIRTHDAY AS MAX FROM STUDENT WHERE SBIRTHDAY = (SELECT MIN(SBIRTHDAY) FROM STUDENT) UNION SELECT SBIRTHDAY AS MIN FROM STUDENT WHERE SBIRTHDAY = (SELECT MAX(SBIRTHDAY) FROM STUDENT);</p><p>40、以班号和年龄从大到小的顺序查询Student表中的全部记录。</p><p>回答：SELECT * FROM STUDENT ORDER BY SCLASS DESC, SBIRTHDAY ASC;</p><p>41、查询“男”教师及其所上的课程。</p><p>回答：  SELECT A.TNAME , B.cname FROM TEACHER A JOIN COURSE B ON A.TNO = B.TNO WHERE A.TSEX=’男’;</p><p>42、查询最高分同学的Sno、Cno和Degree列。</p><p>回答:    SELECT * FROM SCORE WHERE DEGREE = (SELECT MAX(DEGREE) FROM SCORE);</p><p>43、查询和“李军”同性别的所有同学的Sname.</p><p>回答:  SELECT SNAME FROM STUDENT WHERE SSEX =(SELECT SSEX FROM STUDENT WHERE SNAME =’李军’);</p><p>44、查询和“李军”同性别并同班的同学Sname.</p><p>回答： SELECT SNAME FROM STUDENT WHERE SSEX=(SELECT SSEX FROM STUDENT WHERE SNAME=’李军’) AND SCLASS=(SELECT SCLASS FROM STUDENT WHERE SNAME=’李军’);</p><p>45、查询所有选修“计算机导论”课程的“男”同学的成绩表</p><p>回答：SELECT C.* FROM STUDENT A JOIN (COURSE B, SCORE C) ON A.SNO=C.SNO AND B.CNO=C.CNO WHERE B.CNAME=’计算机导论’ AND A.SSEX=’男’</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Python的30个技巧</title>
      <link href="/2018/03/11/shi-yong-python-de-30-ge-ji-qiao/"/>
      <url>/2018/03/11/shi-yong-python-de-30-ge-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h2 id="Tips-1-变量交换"><a href="#Tips-1-变量交换" class="headerlink" title="Tips#1. 变量交换"></a>Tips#1. 变量交换</h2><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python">x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> y<span class="token punctuation">,</span> x<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span></code></pre><ul><li>Output</li></ul><pre><code>10 2020 10</code></pre><h2 id="Tips-2-链接比较运算符"><a href="#Tips-2-链接比较运算符" class="headerlink" title="Tips#2. 链接比较运算符"></a>Tips#2. 链接比较运算符</h2><p>有时候比较运算符的聚合是另一个可以方便的手段</p><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python">n <span class="token operator">=</span> <span class="token number">10</span>result <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;</span> n <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>result <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">></span> n <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><ul><li>Output</li></ul><pre><code>TrueFalse</code></pre><h2 id="Tips-3-使用三元运算符进行条件判断"><a href="#Tips-3-使用三元运算符进行条件判断" class="headerlink" title="Tips#3. 使用三元运算符进行条件判断"></a>Tips#3. 使用三元运算符进行条件判断</h2><p>三元运算符是if-else语句的快捷方式，也称为条件运算符</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span>on_true<span class="token punctuation">]</span> <span class="token keyword">if</span> <span class="token punctuation">[</span>expression<span class="token punctuation">]</span> <span class="token keyword">else</span> <span class="token punctuation">[</span>on_false<span class="token punctuation">]</span></code></pre><p>以下是您可以使用的一些示例，使您的代码紧凑简洁</p><ul><li>Example</li></ul><p>如果<code>y</code>为<code>9</code>，则将<code>10</code>分配给<code>x</code>，否则将<code>20</code>分配给<code>x</code></p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token number">10</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token number">20</span></code></pre><p>同样，我们可以对类对象做同样的事情</p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">(</span>classA <span class="token keyword">if</span> y <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">else</span> classB<span class="token punctuation">)</span><span class="token punctuation">(</span>param1<span class="token punctuation">,</span> param2<span class="token punctuation">)</span></code></pre><p>在上面的例子中，<code>classA</code>和<code>classB</code>是两个类，一个类构造函数将被调用。</p><ul><li>Example</li></ul><p>算出最小的数量</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">small</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a <span class="token keyword">if</span> a <span class="token operator">&lt;=</span> b <span class="token operator">and</span> a <span class="token operator">&lt;=</span> c <span class="token keyword">else</span><span class="token punctuation">(</span>b <span class="token keyword">if</span> b <span class="token operator">&lt;=</span> a <span class="token operator">and</span> b <span class="token operator">&lt;=</span> c <span class="token keyword">else</span> c<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>small<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>small<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>small<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>small<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>Output</li></ul><pre><code>0123</code></pre><p>我们甚至可以使用具有列表理解的三元运算符</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span>m<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">if</span> m <span class="token operator">></span> <span class="token number">10</span> <span class="token keyword">else</span> m<span class="token operator">**</span><span class="token number">4</span> <span class="token keyword">for</span> m <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">625</span><span class="token punctuation">,</span> <span class="token number">1296</span><span class="token punctuation">,</span> <span class="token number">2401</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">,</span> <span class="token number">6561</span><span class="token punctuation">]</span></code></pre><h2 id="Tips-4-使用多行字符串"><a href="#Tips-4-使用多行字符串" class="headerlink" title="Tips#4. 使用多行字符串"></a>Tips#4. 使用多行字符串</h2><p>基本的方法是使用C语言导出的<code>反斜杠</code></p><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> "select <span class="token operator">*</span> <span class="token keyword">from</span> multi_row \<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> where row_id <span class="token operator">&lt;</span> <span class="token number">5</span>"<span class="token string">'select * from multi_row where row_id &lt; 5'</span></code></pre><p>另外一个诀窍就是使用三个引号</p><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token triple-quoted-string string">"""select * from multi_row ... where row_id &lt; 5"""</span><span class="token string">'select * from multi_row \nwhere row_id &lt; 5'</span></code></pre><p>又或者你可以将字符串放在括号中</p><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token string">"select * from multi_row "</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token string">"where row_id &lt; 5 "</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token string">"order by age"</span><span class="token punctuation">)</span> <span class="token string">'select * from multi_row where row_id &lt; 5 order by age'</span></code></pre><h2 id="Tips-5-将列表的元素存储到新变量中"><a href="#Tips-5-将列表的元素存储到新变量中" class="headerlink" title="Tips#5. 将列表的元素存储到新变量中"></a>Tips#5. 将列表的元素存储到新变量中</h2><p>我们可以使用一个列表来初始化一个<code>no</code>的变量。在拆包列表时，变量的数量不应超过<code>no</code>的列表中的元素。</p><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python">testList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token operator">=</span> testList<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span></code></pre><ul><li>Output</li></ul><pre><code>1 2 3</code></pre><h2 id="Tips-6-输出导入模块的文件路径"><a href="#Tips-6-输出导入模块的文件路径" class="headerlink" title="Tips#6. 输出导入模块的文件路径"></a>Tips#6. 输出导入模块的文件路径</h2><p>如果您想知道在代码中导入模块的绝对位置，则使用以下技巧</p><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> socket<span class="token keyword">print</span><span class="token punctuation">(</span>threading<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span></code></pre><ul><li>Output</li></ul><pre><code>&lt;module &#39;threading&#39; from &#39;/home/ansheng/.pyenv/versions/3.6.2/lib/python3.6/threading.py&#39;&gt;&lt;module &#39;socket&#39; from &#39;/home/ansheng/.pyenv/versions/3.6.2/lib/python3.6/socket.py&#39;&gt;</code></pre><h2 id="Tips-7-使用交互式-运算符"><a href="#Tips-7-使用交互式-运算符" class="headerlink" title="Tips#7. 使用交互式_运算符"></a>Tips#7. 使用交互式<code>_</code>运算符</h2><p>在Python控制台中，每当我们测试一个表达式或者调用一个函数时，结果将分派到一个临时名称<code>_（一个下划线）</code></p><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> _<span class="token number">3</span></code></pre><blockquote><p><code>_</code>引用最后执行的表达式的输出</p></blockquote><h2 id="Tips-8-词典-集合推导"><a href="#Tips-8-词典-集合推导" class="headerlink" title="Tips#8. 词典/集合推导"></a>Tips#8. 词典/集合推导</h2><p>像列表推导一样，字典/集合同样也有推导，它们使用简单，同样有效</p><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">{</span>i<span class="token punctuation">:</span> i <span class="token operator">*</span> i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">:</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">:</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">:</span> <span class="token number">81</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">{</span>i <span class="token operator">*</span> <span class="token number">2</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">}</span></code></pre><h2 id="Tips-9-调试脚本"><a href="#Tips-9-调试脚本" class="headerlink" title="Tips#9. 调试脚本"></a>Tips#9. 调试脚本</h2><p>我们可以借助于<code>pdb</code>模块在Python脚本中设置断点</p><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pdbpdb<span class="token punctuation">.</span>set_trace<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="Tips-10-文件共享"><a href="#Tips-10-文件共享" class="headerlink" title="Tips#10. 文件共享"></a>Tips#10. 文件共享</h2><p>Python允许运行一个HTTP服务器，您可以使用它来从服务器根目录共享文件</p><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">~</span>$ python <span class="token operator">-</span>m http<span class="token punctuation">.</span>serverServing HTTP on <span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">0.0</span> port <span class="token number">8000</span> <span class="token punctuation">(</span>http<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">0.0</span><span class="token punctuation">:</span><span class="token number">8000</span><span class="token operator">/</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>以上命令将启动默认端口即<code>8000</code>的服务器，也可以通过将自定义端口作为上一个参数传递给上述命令</p><h2 id="Tips-11-检查Python中的对象"><a href="#Tips-11-检查Python中的对象" class="headerlink" title="Tips#11. 检查Python中的对象"></a>Tips#11. 检查Python中的对象</h2><p>我们可以通过调用<code>dir()</code>方法来检查Python中的对象。</p><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> test <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> dir<span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'__add__'</span><span class="token punctuation">,</span> <span class="token string">'__class__'</span><span class="token punctuation">,</span> <span class="token string">'__contains__'</span><span class="token punctuation">,</span> <span class="token string">'__delattr__'</span><span class="token punctuation">,</span> <span class="token string">'__delitem__'</span><span class="token punctuation">,</span> <span class="token string">'__dir__'</span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">,</span> <span class="token string">'__eq__'</span><span class="token punctuation">,</span> <span class="token string">'__format__'</span><span class="token punctuation">,</span> <span class="token string">'__ge__'</span><span class="token punctuation">,</span> <span class="token string">'__getattribute__'</span><span class="token punctuation">,</span> <span class="token string">'__getitem__'</span><span class="token punctuation">,</span> <span class="token string">'__gt__'</span><span class="token punctuation">,</span> <span class="token string">'__hash__'</span><span class="token punctuation">,</span> <span class="token string">'__iadd__'</span><span class="token punctuation">,</span> <span class="token string">'__imul__'</span><span class="token punctuation">,</span> <span class="token string">'__init__'</span><span class="token punctuation">,</span> <span class="token string">'__init_subclass__'</span><span class="token punctuation">,</span> <span class="token string">'__iter__'</span><span class="token punctuation">,</span> <span class="token string">'__le__'</span><span class="token punctuation">,</span> <span class="token string">'__len__'</span><span class="token punctuation">,</span> <span class="token string">'__lt__'</span><span class="token punctuation">,</span> <span class="token string">'__mul__'</span><span class="token punctuation">,</span> <span class="token string">'__ne__'</span><span class="token punctuation">,</span> <span class="token string">'__new__'</span><span class="token punctuation">,</span> <span class="token string">'__reduce__'</span><span class="token punctuation">,</span> <span class="token string">'__reduce_ex__'</span><span class="token punctuation">,</span> <span class="token string">'__repr__'</span><span class="token punctuation">,</span> <span class="token string">'__reversed__'</span><span class="token punctuation">,</span> <span class="token string">'__rmul__'</span><span class="token punctuation">,</span> <span class="token string">'__setattr__'</span><span class="token punctuation">,</span> <span class="token string">'__setitem__'</span><span class="token punctuation">,</span> <span class="token string">'__sizeof__'</span><span class="token punctuation">,</span> <span class="token string">'__str__'</span><span class="token punctuation">,</span> <span class="token string">'__subclasshook__'</span><span class="token punctuation">,</span> <span class="token string">'append'</span><span class="token punctuation">,</span> <span class="token string">'clear'</span><span class="token punctuation">,</span> <span class="token string">'copy'</span><span class="token punctuation">,</span> <span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token string">'extend'</span><span class="token punctuation">,</span> <span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token string">'insert'</span><span class="token punctuation">,</span> <span class="token string">'pop'</span><span class="token punctuation">,</span> <span class="token string">'remove'</span><span class="token punctuation">,</span> <span class="token string">'reverse'</span><span class="token punctuation">,</span> <span class="token string">'sort'</span><span class="token punctuation">]</span></code></pre><h2 id="Tips-12-简化if语句"><a href="#Tips-12-简化if语句" class="headerlink" title="Tips#12. 简化if语句"></a>Tips#12. 简化if语句</h2><p>要验证多个值，我们可以通过以下方式进行。</p><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> m <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span></code></pre><p>或者，我们可以使用<code>{1,3,5,7}</code>而不是<code>[1,3,5,7]</code>用于<code>in</code>运算符，因为<code>set</code>可以通过<code>O（1）</code>访问每个元素</p><h2 id="Tips-13-在运行时检测Python版本"><a href="#Tips-13-在运行时检测Python版本" class="headerlink" title="Tips#13. 在运行时检测Python版本"></a>Tips#13. 在运行时检测Python版本</h2><p>有时如果当前运行的<code>Python</code>小于受支持的版本，我们可能不想执行我们的程序，要实现这一点，您可以使用下面的代码片段，它还以可读格式打印当前使用的Python版本。</p><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> sys<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Current Python version: "</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>version<span class="token punctuation">)</span>Current Python version<span class="token punctuation">:</span>  <span class="token number">3.6</span><span class="token punctuation">.</span><span class="token number">2</span> <span class="token punctuation">(</span>default<span class="token punctuation">,</span> Aug <span class="token number">25</span> <span class="token number">2017</span><span class="token punctuation">,</span> <span class="token number">09</span><span class="token punctuation">:</span><span class="token number">52</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>GCC <span class="token number">6.3</span><span class="token punctuation">.</span><span class="token number">0</span> <span class="token number">20170406</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">if</span> <span class="token operator">not</span> hasattr<span class="token punctuation">(</span>sys<span class="token punctuation">,</span> <span class="token string">"hexversion"</span><span class="token punctuation">)</span> <span class="token operator">or</span> sys<span class="token punctuation">.</span>hexversion <span class="token operator">!=</span> <span class="token number">50660080</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Sorry, you aren't running on Python 3.5\n"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Please upgrade to 3.5.\n"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Sorry<span class="token punctuation">,</span> you aren't running on Python <span class="token number">3.5</span>Please upgrade to <span class="token number">3.5</span><span class="token punctuation">.</span></code></pre><blockquote><p>sys.version_info &gt;= (3, 5) sys.hexversion!= 50660080</p></blockquote><h2 id="Tips-14-组合多个字符串"><a href="#Tips-14-组合多个字符串" class="headerlink" title="Tips#14. 组合多个字符串"></a>Tips#14. 组合多个字符串</h2><p>如果要连接列表中可用的所有元素，请参见以下示例。</p><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> test <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'I'</span><span class="token punctuation">,</span> <span class="token string">'Like'</span><span class="token punctuation">,</span> <span class="token string">'Python'</span><span class="token punctuation">,</span> <span class="token string">'automation'</span><span class="token punctuation">]</span></code></pre><p>现在，我们从上面给出的列表中的元素创建一个单一的字符串。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token string">'ILikePythonautomation'</span></code></pre><h2 id="Tips-15-四种方式来反转字符串-列表"><a href="#Tips-15-四种方式来反转字符串-列表" class="headerlink" title="Tips#15. 四种方式来反转字符串/列表"></a>Tips#15. 四种方式来反转字符串/列表</h2><ul><li>Example</li></ul><p>反转列表本身</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> testList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> testList<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> testList<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span></code></pre><p>再循环中反复循环</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> element <span class="token keyword">in</span> reversed<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">5</span><span class="token number">3</span><span class="token number">1</span></code></pre><p>反转一行字符串</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"Test Python"</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token string">'nohtyP tseT'</span></code></pre><p>使用切片翻转列表</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span></code></pre><h2 id="Tips-16-枚举"><a href="#Tips-16-枚举" class="headerlink" title="Tips#16. 枚举"></a>Tips#16. 枚举</h2><p>使用枚举器，在循环中找到索引很容易</p><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> testlist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> i<span class="token punctuation">,</span> value <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>testlist<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">': '</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">0</span> <span class="token punctuation">:</span>  <span class="token number">10</span><span class="token number">1</span> <span class="token punctuation">:</span>  <span class="token number">20</span><span class="token number">2</span> <span class="token punctuation">:</span>  <span class="token number">30</span></code></pre><h2 id="Tips-17-在Python中使用枚举"><a href="#Tips-17-在Python中使用枚举" class="headerlink" title="Tips#17. 在Python中使用枚举"></a>Tips#17. 在Python中使用枚举</h2><p>我们可以使用以下方法来创建枚举定义</p><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">Shapes</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     Circle<span class="token punctuation">,</span> Square<span class="token punctuation">,</span> Triangle<span class="token punctuation">,</span> Quadrangle <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">>></span><span class="token operator">></span> Shapes<span class="token punctuation">.</span>Circle<span class="token number">0</span><span class="token operator">>></span><span class="token operator">></span> Shapes<span class="token punctuation">.</span>Square<span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> Shapes<span class="token punctuation">.</span>Triangle<span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> Shapes<span class="token punctuation">.</span>Quadrangle<span class="token number">3</span></code></pre><h2 id="Tips-18-从函数中返回多个值"><a href="#Tips-18-从函数中返回多个值" class="headerlink" title="Tips#18. 从函数中返回多个值"></a>Tips#18. 从函数中返回多个值</h2><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d <span class="token operator">=</span> x<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span></code></pre><ul><li>Output</li></ul><pre><code>1 2 3 4</code></pre><h2 id="Tips-19-使用Splat运算符解包函数参数"><a href="#Tips-19-使用Splat运算符解包函数参数" class="headerlink" title="Tips#19. 使用Splat运算符解包函数参数"></a>Tips#19. 使用Splat运算符解包函数参数</h2><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span>testDict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'x'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span>testList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>test<span class="token punctuation">(</span><span class="token operator">*</span>testDict<span class="token punctuation">)</span>test<span class="token punctuation">(</span><span class="token operator">**</span>testDict<span class="token punctuation">)</span>test<span class="token punctuation">(</span><span class="token operator">*</span>testList<span class="token punctuation">)</span></code></pre><ul><li>Output</li></ul><pre><code>x y z1 2 310 20 30</code></pre><h2 id="Tips-20-使用字典存储开关"><a href="#Tips-20-使用字典存储开关" class="headerlink" title="Tips#20. 使用字典存储开关"></a>Tips#20. 使用字典存储开关</h2><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python">stdcalc <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'sum'</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token punctuation">,</span>    <span class="token string">'subtract'</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">-</span> y<span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>stdcalc<span class="token punctuation">[</span><span class="token string">'sum'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>stdcalc<span class="token punctuation">[</span><span class="token string">'subtract'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>Output</li></ul><pre><code>126</code></pre><h2 id="Tips-21-计算一行中任何数字的阶乘"><a href="#Tips-21-计算一行中任何数字的阶乘" class="headerlink" title="Tips#21. 计算一行中任何数字的阶乘"></a>Tips#21. 计算一行中任何数字的阶乘</h2><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> functools<span class="token operator">>></span><span class="token operator">></span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">lambda</span> k<span class="token punctuation">:</span> functools<span class="token punctuation">.</span>reduce<span class="token punctuation">(</span>int<span class="token punctuation">.</span>__mul__<span class="token punctuation">,</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> result<span class="token number">6</span></code></pre><h2 id="Tips-22-查找列表中最常见的值"><a href="#Tips-22-查找列表中最常见的值" class="headerlink" title="Tips#22. 查找列表中最常见的值"></a>Tips#22. 查找列表中最常见的值</h2><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> test <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>max<span class="token punctuation">(</span>set<span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span>test<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">4</span></code></pre><h2 id="Tips-23-重置递归限制"><a href="#Tips-23-重置递归限制" class="headerlink" title="Tips#23. 重置递归限制"></a>Tips#23. 重置递归限制</h2><p>Python将递归限制限制为<code>1000</code>，我们可以重置其值</p><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> sys<span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token number">1001</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>getrecursionlimit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">1000</span><span class="token operator">>></span><span class="token operator">></span> sys<span class="token punctuation">.</span>setrecursionlimit<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>getrecursionlimit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">1001</span></code></pre><h2 id="Tips-24-检查对象的内存使用情况"><a href="#Tips-24-检查对象的内存使用情况" class="headerlink" title="Tips#24. 检查对象的内存使用情况"></a>Tips#24. 检查对象的内存使用情况</h2><p>在<code>Python 3.5</code>中<code>32</code>位整数使用<code>28字节</code>，要验证内存使用情况，我们可以调用<code>&lt;getsizeof&gt;</code>方法</p><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> sys<span class="token operator">>></span><span class="token operator">></span> x<span class="token operator">=</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>getsizeof<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">28</span></code></pre><h2 id="Tips-25-使用slots来减少内存开销"><a href="#Tips-25-使用slots来减少内存开销" class="headerlink" title="Tips#25. 使用slots来减少内存开销"></a>Tips#25. 使用<strong>slots</strong>来减少内存开销</h2><p>你有没有观察过你的Python应用程序消耗大量资源，特别是内存？</p><p>这是使用<code>&lt;__ slots __&gt;</code>类变量在一定程度上减少内存开销的一个技巧</p><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">FileSystem</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> files<span class="token punctuation">,</span> folders<span class="token punctuation">,</span> devices<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>files <span class="token operator">=</span> files        self<span class="token punctuation">.</span>folders <span class="token operator">=</span> folders        self<span class="token punctuation">.</span>devices <span class="token operator">=</span> devices<span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>getsizeof<span class="token punctuation">(</span>FileSystem<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">FileSystem1</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    __slots__ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'files'</span><span class="token punctuation">,</span> <span class="token string">'folders'</span><span class="token punctuation">,</span> <span class="token string">'devices'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> files<span class="token punctuation">,</span> folders<span class="token punctuation">,</span> devices<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>files <span class="token operator">=</span> files        self<span class="token punctuation">.</span>folders <span class="token operator">=</span> folders        self<span class="token punctuation">.</span>devices <span class="token operator">=</span> devices<span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>getsizeof<span class="token punctuation">(</span>FileSystem1<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>Output</li></ul><pre><code>1056888</code></pre><h2 id="Tips-26-Lambda模仿打印功能"><a href="#Tips-26-Lambda模仿打印功能" class="headerlink" title="Tips#26. Lambda模仿打印功能"></a>Tips#26. Lambda模仿打印功能</h2><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> sys<span class="token operator">>></span><span class="token operator">></span> lprint<span class="token operator">=</span><span class="token keyword">lambda</span> <span class="token operator">*</span>args<span class="token punctuation">:</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>map<span class="token punctuation">(</span>str<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> lprint<span class="token punctuation">(</span><span class="token string">"python"</span><span class="token punctuation">,</span> <span class="token string">"tips"</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">1001</span><span class="token punctuation">)</span>python tips <span class="token number">1000</span> <span class="token number">100121</span></code></pre><h2 id="Tips-27-从两个序列创建一个字典"><a href="#Tips-27-从两个序列创建一个字典" class="headerlink" title="Tips#27. 从两个序列创建一个字典"></a>Tips#27. 从两个序列创建一个字典</h2><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> t2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>dict <span class="token punctuation">(</span>zip<span class="token punctuation">(</span>t1<span class="token punctuation">,</span>t2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">}</span></code></pre><h2 id="Tips-28-在字符串中搜索多个前缀"><a href="#Tips-28-在字符串中搜索多个前缀" class="headerlink" title="Tips#28. 在字符串中搜索多个前缀"></a>Tips#28. 在字符串中搜索多个前缀</h2><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"http://www.google.com"</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"http://"</span><span class="token punctuation">,</span> <span class="token string">"https://"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"http://www.google.co.uk"</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">".com"</span><span class="token punctuation">,</span> <span class="token string">".co.uk"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token boolean">True</span></code></pre><h2 id="Tips-29-形成统一列表，而不使用任何循环"><a href="#Tips-29-形成统一列表，而不使用任何循环" class="headerlink" title="Tips#29. 形成统一列表，而不使用任何循环"></a>Tips#29. 形成统一列表，而不使用任何循环</h2><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> itertools<span class="token operator">>></span><span class="token operator">></span> test <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>itertools<span class="token punctuation">.</span>chain<span class="token punctuation">.</span>from_iterable<span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">]</span></code></pre><p>如果您有一个包含嵌套列表或元组的输入列表作为元素，那么请使用以下技巧。然而，这里的限制是它使用一个for循环。</p><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">unifylist</span><span class="token punctuation">(</span>l_input<span class="token punctuation">,</span> l_target<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> it <span class="token keyword">in</span> l_input<span class="token punctuation">:</span>        <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>it<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">:</span>            unifylist<span class="token punctuation">(</span>it<span class="token punctuation">,</span> l_target<span class="token punctuation">)</span>        <span class="token keyword">elif</span> isinstance<span class="token punctuation">(</span>it<span class="token punctuation">,</span> tuple<span class="token punctuation">)</span><span class="token punctuation">:</span>            unifylist<span class="token punctuation">(</span>list<span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">,</span> l_target<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            l_target<span class="token punctuation">.</span>append<span class="token punctuation">(</span>it<span class="token punctuation">)</span>    <span class="token keyword">return</span> l_targettest <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>unifylist<span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>Output</li></ul><pre><code>[-1, -2, 1, 2, 3, 4, 5, 6, 7, 30, 40, 25, 35]</code></pre><p>统一包含列表和元组的列表的另一个更简单的方法是使用Python的<code>more_itertools</code>包。</p><p>它不需要循环。只要做一个<code>pip install more_itertools</code>，如果还没有</p><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> more_itertools<span class="token operator">>></span><span class="token operator">></span> test <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>more_itertools<span class="token punctuation">.</span>collapse<span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">]</span></code></pre><h2 id="Tips-30-在Python中实现真正的Switch-Case语句"><a href="#Tips-30-在Python中实现真正的Switch-Case语句" class="headerlink" title="Tips#30. 在Python中实现真正的Switch-Case语句"></a>Tips#30. 在Python中实现真正的Switch-Case语句</h2><p>以下是使用字典来模拟开关案例构造的代码</p><ul><li>Example</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">xswitch</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> xswitch<span class="token punctuation">.</span>_system_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span>x<span class="token punctuation">,</span> None<span class="token punctuation">)</span>xswitch<span class="token punctuation">.</span>_system_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'files'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'folders'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'devices'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>xswitch<span class="token punctuation">(</span><span class="token string">'default'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>xswitch<span class="token punctuation">(</span><span class="token string">'devices'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>Output</li></ul><pre><code>None2</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Numpy之多维数组</title>
      <link href="/2018/02/26/duo-wei-shu-zu/"/>
      <url>/2018/02/26/duo-wei-shu-zu/</url>
      
        <content type="html"><![CDATA[<h4 id="查看数组的维度"><a href="#查看数组的维度" class="headerlink" title="查看数组的维度"></a>查看数组的维度</h4><p><strong>ndim</strong></p><blockquote><p>查看数组的维度。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npa1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#打印维度</span><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span>ndim<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">out<span class="token punctuation">:</span> <span class="token number">1</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#二维数组</span>a2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">.</span>ndim<span class="token punctuation">)</span></code></pre><pre><code>out: 2</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#三维数组</span>a3 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token punctuation">[</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">.</span>ndim<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">out<span class="token punctuation">:</span> <span class="token number">3</span></code></pre><p><strong>shape</strong></p><blockquote><p>表示各位维度大小的元组。返回的是一个元组。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#当前数组的构成 几行几列</span><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">.</span>shape<span class="token punctuation">)</span></code></pre><pre><code>out: (3,)      (2, 3)      (2, 2, 3)</code></pre><p><strong>reshape</strong> </p><blockquote><p>数组变形</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#变形 reshape</span>a4 <span class="token operator">=</span> a3<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 变形成两行六列 注意与原来的数组乘积相同</span><span class="token keyword">print</span><span class="token punctuation">(</span>a4<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a4<span class="token punctuation">.</span>shape<span class="token punctuation">)</span></code></pre><pre><code>out: [[ 1  2  3  4  5  6] [ 7  8  9 10 11 12]](2, 6)</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#变成一维数组</span><span class="token comment" spellcheck="true"># a5 = a3.reshape((12,))</span><span class="token comment" spellcheck="true">#第二种方式扁平化转化一维数组 不会修改原来的值</span>a5 <span class="token operator">=</span> a3<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 快捷方式无论多少维直接变为一维数组</span><span class="token keyword">print</span><span class="token punctuation">(</span>a5<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a5<span class="token punctuation">.</span>ndim<span class="token punctuation">)</span></code></pre><pre><code>out: [ 1  2  3  4  5  6  7  8  9 10 11 12]1</code></pre><p><strong>size</strong></p><blockquote><p>获取元素个数</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#size获取元素个数</span>count <span class="token operator">=</span> a3<span class="token punctuation">.</span>size<span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span></code></pre><pre><code>out: 12</code></pre><p><strong>itemsize</strong></p><blockquote><p>数组中每个元素占字节的大小，单位是字节</p></blockquote><pre class=" language-python"><code class="language-python">itemsize <span class="token operator">=</span> a3<span class="token punctuation">.</span>itemsize<span class="token keyword">print</span><span class="token punctuation">(</span>itemsize<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span></code></pre><pre><code>out:out8int64</code></pre>]]></content>
      
      
      <categories>
          
          <category> Numpy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Numpy之数组的切片和索引</title>
      <link href="/2018/02/23/shu-zu-de-qie-pian-he-suo-yin-2/"/>
      <url>/2018/02/23/shu-zu-de-qie-pian-he-suo-yin-2/</url>
      
        <content type="html"><![CDATA[<h4 id="一维数组的索引和切片"><a href="#一维数组的索引和切片" class="headerlink" title="一维数组的索引和切片"></a>一维数组的索引和切片</h4><blockquote><p>如果数组是一维的，那么索引和切片就是跟 python 的列表是一样的。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#1. 一维数组的索引和切片</span>a1 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#1.1 索引操作</span><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#1.2 进行切片操作 与Python列表索引一致</span><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#1.3 使用步长</span><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#1.4 使用负数作为索引</span><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">out<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token number">4</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">2</span> <span class="token number">4</span> <span class="token number">6</span> <span class="token number">8</span><span class="token punctuation">]</span></code></pre><h4 id="多维数组的索引和切片"><a href="#多维数组的索引和切片" class="headerlink" title="多维数组的索引和切片"></a>多维数组的索引和切片</h4><blockquote><p>如果是多维的（这里以二维为例），那么在中括号中，给两个值，两个值是通过逗号分隔的，逗号前面的是行，逗号后面的是列。如果中括号中只有一个值，那么就是代表的是行。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#2. 多维数组</span><span class="token comment" spellcheck="true"># 也是通过中括号来索引和切片，在中括号中使用，分割逗号前面的是行后面的是列</span><span class="token comment" spellcheck="true"># 如果多维数组中只有一个值 那么这个值就是行</span>a2 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span></code></pre><pre><code>out：[[0 4 9 5 6 8] [8 4 1 6 8 1] [2 6 6 9 8 4] [5 4 5 1 3 7]]</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># a2[0]#取第一行</span><span class="token comment" spellcheck="true"># a2[1:3] #第一行和第二行</span>a2<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 获取不连续023行的数据</span></code></pre><pre class=" language-python"><code class="language-python">out<span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">a2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#获取第二行第一列</span></code></pre><pre><code>out: 6</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#获取不连续的行和列 </span>a2<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#获取第一行第四列 你二行第五列</span></code></pre><pre class=" language-python"><code class="language-python">out<span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#获取连续的行和列</span>a2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span></code></pre><pre class=" language-python"><code class="language-python">out<span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#获取某一列的数据</span>a2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#所有行都要取第一列</span></code></pre><pre class=" language-python"><code class="language-python">out<span class="token punctuation">:</span>  array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h4 id="布尔索引"><a href="#布尔索引" class="headerlink" title="布尔索引"></a>布尔索引</h4><blockquote><p>布尔索引是通过相同数组上的 True 还是 False 来进行提取的。提取的条件可以有多个，那么如果有多个，可以使用&amp;来代表且，|用来代表或，如果有多个条件，那么每个条件要使用圆括号括起来</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#布尔索引</span>a2 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># reshape数组变形</span><span class="token keyword">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">out<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span>  <span class="token number">1</span>  <span class="token number">2</span>  <span class="token number">3</span>  <span class="token number">4</span>  <span class="token number">5</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">6</span>  <span class="token number">7</span>  <span class="token number">8</span>  <span class="token number">9</span> <span class="token number">10</span> <span class="token number">11</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">12</span> <span class="token number">13</span> <span class="token number">14</span> <span class="token number">15</span> <span class="token number">16</span> <span class="token number">17</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">18</span> <span class="token number">19</span> <span class="token number">20</span> <span class="token number">21</span> <span class="token number">22</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p>以布尔值为例会筛选出对应的元素</p><pre class=" language-python"><code class="language-python">a2 <span class="token operator">&lt;</span> <span class="token number">10</span> </code></pre><pre class=" language-python"><code class="language-python">out<span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token boolean">True</span><span class="token punctuation">,</span>  <span class="token boolean">True</span><span class="token punctuation">,</span>  <span class="token boolean">True</span><span class="token punctuation">,</span>  <span class="token boolean">True</span><span class="token punctuation">,</span>  <span class="token boolean">True</span><span class="token punctuation">,</span>  <span class="token boolean">True</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token boolean">True</span><span class="token punctuation">,</span>  <span class="token boolean">True</span><span class="token punctuation">,</span>  <span class="token boolean">True</span><span class="token punctuation">,</span>  <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">a2<span class="token punctuation">[</span>a2<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 布尔索引 数组中小于10的元素</span></code></pre><pre><code>out: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</code></pre><pre class=" language-python"><code class="language-python">a2<span class="token punctuation">[</span><span class="token punctuation">(</span>a2<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>a2<span class="token operator">></span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># a2&lt;5 或者a2>10 或关系</span></code></pre><pre class=" language-python"><code class="language-python">out<span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span>       <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h4 id="数组值替换的三种方式"><a href="#数组值替换的三种方式" class="headerlink" title="数组值替换的三种方式"></a>数组值替换的三种方式</h4><pre class=" language-python"><code class="language-python">a3 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#生成三行五列范围在0-10之间不包括10的数组</span>a3</code></pre><pre><code>out: array([[6, 4, 2, 1, 6],       [3, 1, 5, 4, 4],       [9, 6, 4, 8, 2]])</code></pre><h5 id="第一种方式-选中行替换"><a href="#第一种方式-选中行替换" class="headerlink" title="第一种方式 选中行替换"></a>第一种方式 选中行替换</h5><pre class=" language-python"><code class="language-python">a3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">#选中行进行替换</span></code></pre><pre class=" language-python"><code class="language-python">a3</code></pre><pre class=" language-python"><code class="language-python">out<span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">a3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#替换对等元素 数量一定要和原来的数组数量一致</span>a3</code></pre><pre><code>out: array([[6, 4, 2, 1, 6],       [1, 2, 3, 4, 5],       [9, 6, 4, 8, 2]])</code></pre><h5 id="第二种方式-使用条件索引实现"><a href="#第二种方式-使用条件索引实现" class="headerlink" title="第二种方式 使用条件索引实现"></a>第二种方式 使用条件索引实现</h5><pre class=" language-python"><code class="language-python">a3<span class="token punctuation">[</span>a3<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true">#所有小于3的全部设置为1 选中范围</span>a3</code></pre><pre class=" language-python"><code class="language-python">out： array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h5 id="第三种方式-使用函数实现"><a href="#第三种方式-使用函数实现" class="headerlink" title="第三种方式 使用函数实现"></a>第三种方式 使用函数实现</h5><pre class=" language-python"><code class="language-python">result <span class="token operator">=</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>a3<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># a3小于5的是0  a3>5的是1  where函数指定范围</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><pre><code>[[1 0 0 0 1] [0 0 0 0 1] [1 1 0 1 0]]</code></pre>]]></content>
      
      
      <categories>
          
          <category> Numpy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Numpy之数组介绍</title>
      <link href="/2018/02/22/numpy-zhi-shu-zu-jie-shao/"/>
      <url>/2018/02/22/numpy-zhi-shu-zu-jie-shao/</url>
      
        <content type="html"><![CDATA[<p>Numpy 中的数组：</p><p>Numpy 中的数组的使用跟 Python 中的列表非常类似。他们之间的区别如下：</p><ol><li><strong>一个列表中可以存储多种数据类型</strong>。比如 a =  [1, ‘a’]是允许的，而<strong>数组只能存储同种数据类型</strong>。</li><li>数组可以是多维的，当多维数组中所有的数据都是数值类型的时候，相当于线性代数中的矩阵，是可以进行相互间的运算的。</li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Python的列表可以存储多种数据类型   numpy数组只能存在一种数据类型，不能出现多种</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">]</span>a</code></pre><pre class=" language-python"><code class="language-python">out<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">]</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># numpy中的数组的数据类型一定全部一致。</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b</code></pre><pre class=" language-python"><code class="language-python">out<span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="创建数组的四种方式"><a href="#创建数组的四种方式" class="headerlink" title="创建数组的四种方式"></a>创建数组的四种方式</h2><h4 id="根据Python中的列表生成"><a href="#根据Python中的列表生成" class="headerlink" title="根据Python中的列表生成:"></a>根据Python中的列表生成:</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npa1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre><code>[1 2 3 4]&lt;class &#39;numpy.ndarray&#39;&gt;</code></pre><h4 id="使用np-range-生成，np-arange的用法类似于Python中的range"><a href="#使用np-range-生成，np-arange的用法类似于Python中的range" class="headerlink" title="使用np.range 生成，np.arange的用法类似于Python中的range:"></a>使用np.range 生成，np.arange的用法类似于Python中的range:</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># 从2开始不包括21 步进2</span>a2 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span></code></pre><pre><code>out: [ 2  4  6  8 10 12 14 16 18 20]</code></pre><h4 id="使用-np-random-生成随机数的数组："><a href="#使用-np-random-生成随机数的数组：" class="headerlink" title="使用 np.random 生成随机数的数组："></a>使用 np.random 生成随机数的数组：</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># np.random.random来创建一个N行N列的数组，其中里面的值是0-1之间的随机数</span>c <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> c</code></pre><pre class=" language-python"><code class="language-python">array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.61377625</span><span class="token punctuation">,</span> <span class="token number">0.23174916</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0.98162163</span><span class="token punctuation">,</span> <span class="token number">0.0776171</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 0-9之间4行4列的随机数  size控制范围</span>d <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>d</code></pre><pre class=" language-python"><code class="language-python">array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h4 id="使用函数生成特殊的数组："><a href="#使用函数生成特殊的数组：" class="headerlink" title="使用函数生成特殊的数组："></a>使用函数生成特殊的数组：</h4><pre class=" language-python"><code class="language-python"> <span class="token comment" spellcheck="true"># 4.1: zeros #三行三列 全是0的数组</span>array_zeros <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>array_zeros</code></pre><pre class=" language-python"><code class="language-python">out<span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 4.2:  四行四列全是1的数组</span>array_ones <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>array_ones</code></pre><pre><code>out: array([[1., 1., 1., 1.],       [1., 1., 1., 1.],       [1., 1., 1., 1.],       [1., 1., 1., 1.]])</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 4.3  full的用法 生成两行三列全是9</span>array_full <span class="token operator">=</span> np<span class="token punctuation">.</span>full<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span>array_full</code></pre><pre class=" language-python"><code class="language-python">out<span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 4.4 对称数组</span>array_eye <span class="token operator">=</span> np<span class="token punctuation">.</span>eye<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>array_eye</code></pre><pre><code>out: array([[1., 0., 0., 0.],       [0., 1., 0., 0.],       [0., 0., 1., 0.],       [0., 0., 0., 1.]])</code></pre>]]></content>
      
      
      <categories>
          
          <category> Numpy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Numpy初级入门</title>
      <link href="/2018/02/14/numpy-ku-jie-shao/"/>
      <url>/2018/02/14/numpy-ku-jie-shao/</url>
      
        <content type="html"><![CDATA[<h5 id="Numpy-库介绍。"><a href="#Numpy-库介绍。" class="headerlink" title="Numpy 库介绍。"></a>Numpy 库介绍。</h5><p>NumPy是一个功能强大的 Python 库，主要用于对多维数组执行计算。NumPy这个词来源于两个单词– Numerical和Python。NumPy提供了大量的库函数和操作，可以帮助程序员轻松地进行数值计算。在数据分析和机器学习领域被广泛使用。他有以下几个特点：</p><ol><li>Numpy 内置了并行运算功能，当系统有多个核心时，做某种计算时，numpy 会自动做并行计算。</li><li>Numpy 底层使用 C 语言编写，内部解除了GIL(全局解释器锁），其对数组的操作速度不受 Python 解释器的限制，效率远高于纯Python代码。</li><li>有一个强大的N维数组对象 Array（一种类似于列表的东西).</li><li>实用的线性代数、傅里叶变换和随机数生成函数。</li></ol><p>是一个非常高效的用于处理数值型运算的包。</p><h5 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h5><p>   通过 pip install numpy 即可安装。</p><p>Numpy 数组和 Python 列表性能对比：<br>比如我们想要对- -个 Numpy 数组和 Python 列表中的每个素进行求平方。那么代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Python 列表的方式</span><span class="token keyword">import</span> time <span class="token keyword">import</span> numpy <span class="token keyword">as</span> npt1 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range <span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  a<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span>t2 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token operator">=</span>t2<span class="token operator">-</span>t1<span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#花费的时间大约是 8.07180 左右。而如果使用 numpy 的数组来做，那速度就要快很多了：</span>t3 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span>t4 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t4<span class="token operator">-</span>t3<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Numpy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac下安装Anaconda，Conda管理Python环境</title>
      <link href="/2018/02/13/mac-xia-an-zhuang-anaconda/"/>
      <url>/2018/02/13/mac-xia-an-zhuang-anaconda/</url>
      
        <content type="html"><![CDATA[<h1 id="Mac下安装Anaconda，Conda管理Python环境"><a href="#Mac下安装Anaconda，Conda管理Python环境" class="headerlink" title="Mac下安装Anaconda，Conda管理Python环境"></a>Mac下安装Anaconda，Conda管理Python环境</h1><p>在使用Python时，经常需要用到的很多第三方库，如图像处理库Pillow，MySQL驱动程序，Web框架Flask、科学计算Numpy等。可以使用pip一个一个安装，但比较麻烦，还需要来考虑兼容性。因此推荐使用Anaconda，这是一个基于Python的数据处理和科学计算平台，它已经内置了很多非常有用的第三方库，安装上Anaconda，就相当于把数十个第三方模块自动安装好了，非常简单易用</p><p>可以从<a href="https://link.jianshu.com?t=https%3A%2F%2Fwww.anaconda.com%2F" target="_blank" rel="noopener">Anaconda官网</a>下载GUI安装包，安装包有500~600M，所以需要耐心等待下载。下载后直接安装，Anaconda会把系统Path中的python指向自己自带的Python，并且，Anaconda安装的第三方模块会安装在Anaconda自己的路径下，不影响系统已安装的Python目录。</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g1748r6puwj313g0iiwl0.jpg" alt="image-20190318181836599"></p><p>直接下一步安装即可，安装完毕之后，打开终端，之前因为已经安装了Python 2.7和Python 3.6， 因此需要使用<code>python2</code>、<code>python3</code>命令才可以进入环境中，因为Anaconda会把系统Path中的python指向自己自带的Python，因此这时候只需要使用<code>python</code>命令即可进到环境中，并且是下载的3.6版本，同时导入numpy包就直接可以使用了</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g174a2uwihj314g070wgb.jpg" alt="image-20190318181954921"></p><h5 id="强烈建议用conda来接管Python包环境"><a href="#强烈建议用conda来接管Python包环境" class="headerlink" title="强烈建议用conda来接管Python包环境"></a>强烈建议用conda来接管Python包环境</h5><blockquote><p>conda 是针对于 python 的环境和包管理工具。可以安装 minconda 或 anaconda 进行安装，前者是简化版本，只包含 conda 和其依赖。conda 有 Python3.x 和 Python2.x 系列两个版本，其实都没有关系，因为你在使用 conda 进行创建环境时，可以指定 Python 的版本。</p></blockquote><h2 id="查看-conda-帮助"><a href="#查看-conda-帮助" class="headerlink" title="查看 conda 帮助"></a>查看 conda 帮助</h2><p>所有关于 conda 的使用都可以从帮助信息获取，在什么也不知道的情况下就可以使用 <code>conda -h/--help</code> 查看帮助信息：下面介绍常用的几个命令</p><pre class=" language-Python"><code class="language-Python">conda info -e  #查看创建的虚拟环境</code></pre><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g174kujoe4j30xi0kqqad.jpg" alt="image-20190318183016660"></p><h4 id="conda-list"><a href="#conda-list" class="headerlink" title="conda list"></a>conda list</h4><p>列出当前环境下所有安装的 conda 包。</p><pre class=" language-python"><code class="language-python">列出当前环境下所有安装的 conda 包。</code></pre><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g174mg3q0rj312c0nak1i.jpg" alt="image-20190318183149543"></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>使用 conda install 安装 conda 包，会自动处理包之间的依赖。</p><pre class=" language-shell"><code class="language-shell">conda install scrapy</code></pre><p>使用 conda 安装指定版本包，既可以使用类似 pip 的 ==，也可以直接使用 =：</p><pre class=" language-shell"><code class="language-shell">  conda install scrapy=1.5.0</code></pre><h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><p>使用 conda update 更新 conda 包到最新版本，也可使用 conda upgrade。</p><pre class=" language-shell"><code class="language-shell">conda update scrapy</code></pre><h4 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h4><p>使用 conda remove 卸载 conda 包，也可使用 conda uninstall。</p><pre class=" language-shell"><code class="language-shell">conda remove scrapy</code></pre><h3 id="环境管理命令"><a href="#环境管理命令" class="headerlink" title="环境管理命令"></a>环境管理命令</h3><h4 id="创建环境"><a href="#创建环境" class="headerlink" title="创建环境"></a>创建环境</h4><p>创建虚拟环境，使用 <code>-n/--name</code> 指定环境名称。可以在创建环境的同时安装包。由于 conda 将 python 也作为包，所以可以像其他包一样安装。</p><pre class=" language-shell"><code class="language-shell">conda create --name tf python=3.5.2 tensorflow</code></pre><p>默认处于 base 环境，进入其他环境需要使用 <code>source activate</code> 手动切换：</p><p>注意(mac 环境下可能会出现找不到命令需要执行source ~/.bash_profile)</p><pre class=" language-shell"><code class="language-shell">source activate tf </code></pre><p>激活成功会在命令行提示符前面标识出当前环境：</p><pre class=" language-shell"><code class="language-shell">(tf) ➜ ~ </code></pre><p>若要退出激活当前环境，使用 <code>source deactivate</code>，默认回到 base 环境：</p><pre class=" language-shell"><code class="language-shell">source deactivate</code></pre><p>删除环境也使用 <code>conda remove</code> 命令，不过加上参数 <code>--all</code> 并使用 <code>-n/--name</code> 指定要删除的环境名。</p><pre class=" language-shell"><code class="language-shell">$ conda remove -n tf --all</code></pre><p>也可以使用命令 <code>conda env remove -n tf</code>。</p><h2 id="使用国内-conda-软件源加速"><a href="#使用国内-conda-软件源加速" class="headerlink" title="使用国内 conda 软件源加速"></a>使用国内 conda 软件源加速</h2><p>同样，使用 pip 管理包的忽略。conda 会在每个用户家目录下创建 <code>.conda</code> 目录，用于管理创建的环境，而配置文件存放于 <code>.condarc</code>（没有可以新建）。</p><p>国内源比较好的有：</p><ul><li><a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/" target="_blank" rel="noopener">清华大学 conda 仓库镜像</a></li><li><a href="https://mirrors.ustc.edu.cn/help/anaconda.html" target="_blank" rel="noopener">中科大 conda 仓库镜像</a></li></ul><p>使用方法：</p><pre><code>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/$ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/$ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/$ conda config --set show_channel_urls yes</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pythoner必会的Linux命令</title>
      <link href="/2017/11/02/pythoner-bi-hui-de-linux-ming-ling/"/>
      <url>/2017/11/02/pythoner-bi-hui-de-linux-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="Pythoner-必会的linux命令"><a href="#Pythoner-必会的linux命令" class="headerlink" title="Pythoner 必会的linux命令"></a>Pythoner 必会的linux命令</h1><blockquote><p>起因</p></blockquote><p>在日常工作中，学习linux是很痛苦的过程，此文主要列出日常开发所用常用命令行总结，并非linux命令完全指南性学习</p><blockquote><p>入门必看</p></blockquote><h5 id="Linux是什么"><a href="#Linux是什么" class="headerlink" title="Linux是什么"></a>Linux是什么</h5><p><code>Linux</code> 是一个开源系统内核，1991年由托瓦兹 (Linus Torvalds) 开发出来的，我们平时讲的 <code>Liunx</code> 系统其实并不是很准确，<code>Ubuntu</code> <code>CentOS</code> 这些才是系统，<code>Linux</code> 是参考 <code>Unix</code> 系统开发出来的。</p><p>现实生活中有哪些软件或系统是基于 <code>Linux</code> 开发出来的呢？ <code>嵌入式</code> 程序开发 <code>Android</code> 手机系统，我们经常浏览的网站服务器，基本都是运行 <code>Linux</code> 系统之上。</p><p><code>Linux</code> 是一个支持多用户、多任务的系统。</p><p><code>Linux</code> 系统上一切都是以文件的形式存在，文件和目录名称都区分大小写的。所有文件命名要体现文件的格式或内容，<code>demo.php</code> 代表这是一个 <code>php</code> 文件，<code>demo.txt</code> 代表 <code>txt</code> 文件，<code>demo.tar.gz</code> 代表以 <code>gzip</code>压缩的打包文件。还有一种特殊文件，有文件也有目录，文件名称以 <code>.</code> 开头的隐藏文件，例如： <code>.vim</code> 默认是不显示的，一般都是软件的配置文件。</p><p>无论是源码编译安装还是通过包管理器 <code>yum</code> 或 <code>apt-get</code> 安装的软件，默认都是需要设置开机自启动，单纯的启动服务，如果服务器有重启的话，程序无法运行，还要登录服务器排查原因，费事费力。</p><h5 id="关于Linux命令的几个分类"><a href="#关于Linux命令的几个分类" class="headerlink" title="关于Linux命令的几个分类"></a>关于Linux命令的几个分类</h5><ul><li>内置命令<ul><li>例如 <code>cd</code> <code>ls</code> 这些命令，默认系统内置无需安装</li></ul></li><li>外置命令<ul><li>例如 <code>ccat</code> <code>wget</code> ,如果执行命令提示 command not found ,通常都是需要用户自己使用 <code>apt-get</code> 或 <code>yum</code> 软件包管理器安装</li></ul></li><li>程序或软件命令<ul><li>例如 <code>nginx</code> <code>php</code> 或者自己写的程序编译出来的命令，这种命令与外置命令类似，但是会有配置等其他文件，外置命令一般安装之后只有一个二进制可执行文件</li></ul></li></ul><h5 id="Linux的优势"><a href="#Linux的优势" class="headerlink" title="Linux的优势"></a>Linux的优势</h5><ul><li>跨平台</li><li>安全</li><li>多用户多任务</li><li>占用系统资源少</li><li>网络功能强大</li><li>稳定性 多作为企业服务器使用</li></ul><h5 id="Linux的运行级别"><a href="#Linux的运行级别" class="headerlink" title="Linux的运行级别"></a>Linux的运行级别</h5><ul><li>0停机，关机</li><li>1 单用户，无网络连接，不运行守护进程，仅root用户可以登录</li><li>2 多用户， 无网络连接，不允许守护进程</li><li>3 多用户，正常启动系统</li><li>4 用户自定义</li><li>5 多用户，带图形界面</li><li>6 重启</li></ul><p>Linux的启动流程</p><ol><li>加载内核</li><li>启动初始化进程</li><li>确定运行级别</li><li>加载开机启动程序</li><li>用户登录</li><li>进入 login shell</li><li>打开 non-login shell</li></ol><h5 id="Linux-的目录结构"><a href="#Linux-的目录结构" class="headerlink" title="Linux 的目录结构"></a>Linux 的目录结构</h5><p>Ubuntu 16.04</p><pre><code>/bin            #用户二进制文件/boot           #启动核心文件/dev            #设备文件/etc            #配置文件/home           #用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的/lib            #系统库/lib64          #系统库/lost+found     #这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件/media          #可移动媒体设备/mnt            #挂载目录/opt            #用户安装的软件目录/proc           #进程信息/root           #该目录为系统管理员，也称作超级权限者的用户主目录/run            #存放进程的I/sbin           #s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序/tmp            #系统临时文件/srv            #srv是service的缩写，该目录存放一些服务启动之后需要提取的数据/sys            #这个目录跟/proc 非常类似，也是一个虚拟的文件系统，主要也是记录与内核相关的信息。/usr            #注意 usr 并不是 user 的缩写，而是Unix Software Resource的缩写，即 Unix 操作系统软件资源放在该目录，而不是用户的数据。/var            #软件运行所产生的文件</code></pre><p>补充: 其他 <code>Linux</code> 系统的发行版目录大致一致</p><p>cd-ls pwd </p><h4 id="cd-命令-change-dirname-的缩写形式，进入指定目录"><a href="#cd-命令-change-dirname-的缩写形式，进入指定目录" class="headerlink" title="cd 命令 change dirname 的缩写形式，进入指定目录"></a>cd 命令 change dirname 的缩写形式，进入指定目录</h4><pre><code>cd /usr/local #进入 /usr/local 目录cd / #进入 / 目录cd ~ #进入当前用户家目录cd - #进入执行上一条命令所在目录cd ../ #进入当前目录的上一级目录</code></pre><p>补充：<code>.</code> 代表当前目录，<code>..</code> 代表上一级目录，<code>~</code> 代表当前用户的家目录，<code>/</code> 代表根目录，根目录的上一级目录指向的还是根目录。推荐安装autojump插件进行目录跳转</p><p>关于文件名的重要规则</p><blockquote><ol><li><p>以 “.” 字符开头的文件名是隐藏文件。这仅表示，ls 命令不能列出它们， 用 ls -a 命令就可以了。当你创建帐号后，几个配置帐号的隐藏文件被放置在 你的家目录下。稍后，我们会仔细研究一些隐藏文件，来定制你的系统环境。 另外，一些应用程序也会把它们的配置文件以隐藏文件的形式放在你的家目录下面。</p></li><li><p>文件名和命令名是大小写敏感的。文件名 “File1” 和 “file1” 是指两个不同的文件名。</p></li><li><p>Linux 没有“文件扩展名”的概念，不像其它一些系统。可以用你喜欢的任何名字 来给文件起名。文件内容或用途由其它方法来决定。虽然类 Unix 的操作系统， 不用文件扩展名来决定文件的内容或用途，但是有些应用程序会。</p></li><li><p>虽然 Linux 支持长文件名，文件名可能包含空格，标点符号，但标点符号仅限 使用 “.”，“－”，下划线。最重要的是，不要在文件名中使用空格。如果你想表示词与 词间的空格，用下划线字符来代替。过些时候，你会感激自己这样做。</p></li></ol></blockquote><h4 id="ls-命令-以列表的形式显示文件"><a href="#ls-命令-以列表的形式显示文件" class="headerlink" title="ls 命令 以列表的形式显示文件"></a>ls 命令 以列表的形式显示文件</h4><pre><code>ls 显示当前目录的文件和目录，不包含隐藏文件ls -a 显示所有文件和目录，包含隐藏文件ls -l #显示文件和文件夹的详细信息ll #ls -l 命令的简写ls -A #只显示隐藏的文件和目录，不显示 . 和 ..ls -R dirname #递归显示目录的所有内容ls -t #按修改时间排序显示ls -lS #按文件从大到小排序ls -lh #将文件大小转成 b kb mb g 的形式ls -al #以长格式显示目录和文件的内容列表，包含隐藏文件。输出的信息从左到右依次包括文件名，文件类型、权限模式、硬连接数、所有者、组、文件大小和文件的最后修改时间等</code></pre><h4 id="pwd-显示所在位置的命令-print-work-dirname-简写"><a href="#pwd-显示所在位置的命令-print-work-dirname-简写" class="headerlink" title="pwd 显示所在位置的命令 print work dirname 简写"></a>pwd 显示所在位置的命令 print work dirname 简写</h4><pre><code>pwd #显示所在位置</code></pre><blockquote><p>用户与用户组</p></blockquote><h5 id="user-group"><a href="#user-group" class="headerlink" title="user-group"></a>user-group</h5><h4 id="users-命令"><a href="#users-命令" class="headerlink" title="users 命令"></a>users 命令</h4><pre><code>users #查看当前在线的用户名称列表</code></pre><h4 id="用户分-3-种"><a href="#用户分-3-种" class="headerlink" title="用户分 3 种"></a>用户分 3 种</h4><ol><li>root 用户，即是超级管理员</li><li>拥有root权限的用户，可以执行 sudo 命令</li><li>普通用户</li></ol><h4 id="用户文件与配置"><a href="#用户文件与配置" class="headerlink" title="用户文件与配置"></a>用户文件与配置</h4><ul><li>/etc/password</li><li>/etc/shadow</li></ul><h4 id="adduser命令"><a href="#adduser命令" class="headerlink" title="adduser命令"></a>adduser命令</h4><pre><code>adduser demo #添加账号</code></pre><ul><li>补充：此命令在 CentOS7.2 系统中为软连接，源目标是 adduser 命令。在 Ubuntu16.04 中是独立的命令，添加账号时会有友好的提示，设置密码账号信息等</li></ul><h4 id="useradd-命令"><a href="#useradd-命令" class="headerlink" title="useradd 命令"></a>useradd 命令</h4><pre><code>useradd demo #添加用户，默认家目录在 /home/ 目录下 demo 目录，与用户名一致passwd demo #设置密码，默认添加用户之后没设置密码不允许登录useradd -u 2333 demo #添加用户并指定用户 id ，一般情况很少使用useradd -d /home/testuser demo #添加用户并指定家目录，一般情况很少使用useradd -G xxx,xxx demo #添加用户并加入多个附加组</code></pre><h4 id="usermod-命令"><a href="#usermod-命令" class="headerlink" title="usermod 命令"></a>usermod 命令</h4><pre><code>usermod -L demo #锁定用户，不允许登录，相当于手动修改 /etc/shadow 文件中用户密码前加入 ! 一个感叹号usermod -U demo #解除锁定</code></pre><h4 id="userdel-命令"><a href="#userdel-命令" class="headerlink" title="userdel 命令"></a>userdel 命令</h4><pre><code>userdel demo #删除用户，不删除用户家目录数据userdel -r demo #删除用户并删除用户家目录userdel -rf demo #强制删除用户无论是否登录，并删除用户家目录</code></pre><h4 id="passwd-目录"><a href="#passwd-目录" class="headerlink" title="passwd 目录"></a>passwd 目录</h4><pre><code>passwd -l demo #锁定用户，不允许登录，相当于手动修改 /etc/shadow 文件中用户密码前加入 !! 双感叹号passwd -u demo #解除锁定</code></pre><h4 id="groups-命令"><a href="#groups-命令" class="headerlink" title="groups 命令"></a>groups 命令</h4><pre><code>groups #查看当前用户的用户组名称</code></pre><h4 id="用户组分两种"><a href="#用户组分两种" class="headerlink" title="用户组分两种"></a>用户组分两种</h4><ol><li>初始组(默认组)</li><li>其他组(附加组)</li></ol><h4 id="用户组文件与配置"><a href="#用户组文件与配置" class="headerlink" title="用户组文件与配置"></a>用户组文件与配置</h4><ul><li>/etc/group</li><li>/etc/gshadow</li></ul><h4 id="addgroup-命令"><a href="#addgroup-命令" class="headerlink" title="addgroup 命令"></a>addgroup 命令</h4><pre><code>groupadd test #添加用户组</code></pre><h4 id="groupmod-命令"><a href="#groupmod-命令" class="headerlink" title="groupmod 命令"></a>groupmod 命令</h4><pre><code>groupmod -n new_test test #讲 test 组名修改为 new_test</code></pre><h4 id="gpasswd-命令"><a href="#gpasswd-命令" class="headerlink" title="gpasswd 命令"></a>gpasswd 命令</h4><pre><code>gpasswd -a nick new_test #将 nick 用户添加到 new_test 组gpasswd -d nick new_test #将 nick 用户从 new_test 组删除</code></pre><h4 id="groupdel-命令"><a href="#groupdel-命令" class="headerlink" title="groupdel 命令"></a>groupdel 命令</h4><pre><code>groupdel new_test #删除用户组</code></pre><p>补充：每添加一个用户会自动创建一个用户组，称为默认组或初始组，这个组是不允许删除的，默认组一般不修改最好，用户 id 也一样。</p><h4 id="sudo-命令"><a href="#sudo-命令" class="headerlink" title="sudo 命令"></a>sudo 命令</h4><pre><code>sudo vim /etc/passwd #以另一个用户身份执行命令，通常是 root 用户</code></pre><p>补充：普通用户添加执行 <code>sudo</code> 的方法，在 <code>/etc/sudoers</code> 文件中添加 <code>username ALL=(ALL) ALL</code> 即可。</p><h4 id="su-命令"><a href="#su-命令" class="headerlink" title="su 命令"></a>su 命令</h4><pre><code>su   #切换到 root 用户，仅切换路径su - #切换到 root 用户，环境变量和路径一起切换su - nick #切换到 nick 用户，环境变量和路径一起切换</code></pre><h4 id="whoami-命令"><a href="#whoami-命令" class="headerlink" title="whoami 命令"></a>whoami 命令</h4><pre><code>whoami #查看当前用户的名称</code></pre><h4 id="id-命令"><a href="#id-命令" class="headerlink" title="id 命令"></a>id 命令</h4><pre><code>id #查看当前用户的 id 、组 id 、附加组 id id -un #查看当前用户的名称id -g #当前用户的组 idid -G #当前用户的附加组 idid -u root #查看指定用户的 idid root #查看指定用户的 id gid groupsid</code></pre><h4 id="who-命令"><a href="#who-命令" class="headerlink" title="who 命令"></a>who 命令</h4><pre><code>who #查看当前的在线用户、终端号、IP、登录时间who -q #查看在线的用户的用户名，用户数</code></pre><blockquote><p>文件与目录</p></blockquote><p>file-dir</p><h4 id="touch-命令"><a href="#touch-命令" class="headerlink" title="touch 命令"></a>touch 命令</h4><pre><code>touch index.html #新建空文件</code></pre><h4 id="mkdir-命令"><a href="#mkdir-命令" class="headerlink" title="mkdir 命令"></a>mkdir 命令</h4><pre><code>mkdir demo #创建目录mkdir -p ~/python/flask #递归创建目录mkdir -m 755 www #创建目录并指定权限</code></pre><h4 id="rmdir-命令"><a href="#rmdir-命令" class="headerlink" title="rmdir 命令"></a>rmdir 命令</h4><pre><code>rmdir demo #删除空目录，如果目录有文件无法删除</code></pre><h4 id="cp-命令"><a href="#cp-命令" class="headerlink" title="cp 命令"></a>cp 命令</h4><pre><code>cp index.html html5 #复制 index.html 文件到当前 html5 目录下cp -a index.html html5 #复制 index.html 文件到当前 html5 目录下,保留文件的属性、权限、软连接自动指向目标文件cp index.html ~/app.html5 #复制文件到指定目录下并修改文件名cp -R html5 html #递归复制 html5 目录下所有文件到 html 目录</code></pre><h4 id="mv-命令"><a href="#mv-命令" class="headerlink" title="mv 命令"></a>mv 命令</h4><pre><code>mv index.html html5.html #将 index.html 名称更改为 html5.htmlmv ~/python /home #将家目录下 python 目录移动到根目录 home 目录下</code></pre><h4 id="rm-命令"><a href="#rm-命令" class="headerlink" title="rm 命令"></a>rm 命令</h4><pre><code>rm index.html #删除文件rm -i index.html #执行删除询问 y 代表删除 n 代表取消rm -r test #递归删除目录rm -f test #强制删除目录rm -rf python #强制递归删除目录</code></pre><h4 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h4><pre><code>unlink demo.php #删除文件，与 rm 类似，但只能删除文件</code></pre><h4 id="tree-命令"><a href="#tree-命令" class="headerlink" title="tree 命令"></a>tree 命令</h4><pre><code>tree ~ #以树状图列出指定目录的内容tree -d laravel #以树状图列出指定目录的内容，不包括文件tree ~/test -H &#39;目录结构&#39; -o out.html --nolinks #将内容以树状形式写入到 HTML 文件中，不包含链接</code></pre><h4 id="file-命令"><a href="#file-命令" class="headerlink" title="file 命令"></a>file 命令</h4><pre><code>file demo.php #查看文件格式类型</code></pre><blockquote><p>文件目录权限</p></blockquote><p>file-dir-permissions</p><h4 id="Linux-的文件类型"><a href="#Linux-的文件类型" class="headerlink" title="Linux 的文件类型"></a>Linux 的文件类型</h4><ol><li>普通文件, 符号为 <code>-</code></li><li>目录, 符号为 <code>d</code></li><li>字符设备，符号为 <code>c</code></li><li>块装备，符号为<code>b</code></li><li>套接字文件 符号为<code>c</code></li><li>软链接文件，类似 <code>Windows</code> 系统的快捷方式，删除了并不会影响源文件，符号为 <code>l</code></li><li>管道文件，符号为 <code>p</code></li></ol><p>补充：常见的文件类型为 <code>-</code> <code>d</code> <code>l</code></p><h4 id="Linux-的-3-种权限"><a href="#Linux-的-3-种权限" class="headerlink" title="Linux 的 3 种权限"></a>Linux 的 3 种权限</h4><ul><li><code>r</code> 代表 <code>read</code> 读权限，数字代表为 <code>4</code></li><li><code>w</code> 代表 <code>wirte</code> 写权限，数字代表为 <code>2</code></li><li><code>x</code> 代表 <code>execute</code> 执行权限，数字代表为 <code>1</code></li></ul><h4 id="Linux-的-3-种用户"><a href="#Linux-的-3-种用户" class="headerlink" title="Linux 的 3 种用户"></a>Linux 的 3 种用户</h4><ul><li>拥有者（owner)</li><li>用户组（group）</li><li>其它人（others）</li></ul><h4 id="解读"><a href="#解读" class="headerlink" title="解读"></a>解读</h4><pre><code>-rw-rw-r-- 1 nick nick 0 May 12 16:05 demo.html- 第 1 列代表文件类型rw- 第 2-4 列代表所属用户的权限rw- 第 5-7 列代表所属用户组的权限r-- 第 8-11 其他用户所属权限1 第 11 列代表文件被引用的次数nick 第 12 列代表文件所属用户名称nick 第 13 列代表文件所属用户组名称0 第 14 列代表文件大小May 12 16:05 第 15-17 列代表文件最后的修改时间demo.html 第 18 列代表文件名称</code></pre><h3 id="stat-命令"><a href="#stat-命令" class="headerlink" title="stat 命令"></a>stat 命令</h3><pre><code>stat filename #查看文件的详细信息，文件的访问时间、修改时间、改变时间，linux 文件没有创建时间</code></pre><h4 id="chmod-命令"><a href="#chmod-命令" class="headerlink" title="chmod 命令"></a>chmod 命令</h4><pre><code>chmod 755 filename #将文件权限修改为 755 ,即拥有者有读写执行权限，用户组有读执行权限，其他人有读执行权限 chmod -R 755 dirname #递归修改目录的权限</code></pre><h4 id="chown-命令"><a href="#chown-命令" class="headerlink" title="chown 命令"></a>chown 命令</h4><pre><code>chown nick index.html #将文件拥有者改为 nickchown :nick index.html #将文件用户组修改为 nickchown nick:nick index.html #将文件拥有者和用户组修改为 nickchown nick python #将目录拥有者修改为 nickchown :nick python #将目录用户组修改为 nickchown nick:nick python #将目录拥有者和用户组修改为 nickchown -R nick:nick python #递归将目录拥有者和用户组修改为 nick</code></pre><h4 id="chgrp-命令"><a href="#chgrp-命令" class="headerlink" title="chgrp 命令"></a>chgrp 命令</h4><pre><code>chgrp nick demo #改变目录的所属用户组chgrp nick test.html #改变文件的所属用户组chgrp -R nick demo #递归改变目录的所属用户组</code></pre><h4 id="umask-命令"><a href="#umask-命令" class="headerlink" title="umask 命令"></a>umask 命令</h4><p>默认的补码为 022 ,补码越小权限越大，补码的计算规则为 rwx 读写执行即 777 减补码是权限数字 root 的 umask 为 022 ，创建的目录或文件为 755 rwxr-xr-x 权限 普通用户的 umask 为 002 ，创建的目录或文件为 775 rwxrwxr-x 权限 最大权限减 umask 等于默认权限，结果为奇数，则奇数位 +1</p><pre><code>umask #查看权限补码umask -S #查看当前用户权限补码</code></pre><h4 id="chattr-命令"><a href="#chattr-命令" class="headerlink" title="chattr 命令"></a>chattr 命令</h4><pre><code>chattr +i index.php #设置文件不允许修改、删除、移动、复制，root 用户也生效chattr -i index.php #取消文件属性设置chattr +i demo #设置目录属性，目录内的文件目录只能修改，不能新建与修改，子目录的文件目录不生效，目录层级只有一层</code></pre><h4 id="lsattr-命令"><a href="#lsattr-命令" class="headerlink" title="lsattr 命令"></a>lsattr 命令</h4><p>`</p><pre class=" language-linux"><code class="language-linux">lsattr filename  #查看文件属性``lsattr -d demo #查看目录属性``lsattr -R demo #递归查看目录属性``lsattr -a demo #查看所有目录文件隐藏文件</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker快速入门指南</title>
      <link href="/2017/02/01/docker-kuai-su-ru-men-zhi-nan/"/>
      <url>/2017/02/01/docker-kuai-su-ru-men-zhi-nan/</url>
      
        <content type="html"><![CDATA[<h2 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h2><ul><li>搜索镜像</li></ul><pre class=" language-bash"><code class="language-bash">$ docker search centos</code></pre><ul><li>下载镜像</li></ul><pre class=" language-bash"><code class="language-bash">$ docker pll centos</code></pre><ul><li>导入镜像</li></ul><pre class=" language-bash"><code class="language-bash">$ docker load <span class="token operator">&lt;</span> ./docker/image/centos.tar.gz</code></pre><ul><li>导出镜像</li></ul><pre class=" language-bash"><code class="language-bash">$ docker save centos <span class="token operator">></span> /tmp/centos.tar.gz</code></pre><ul><li>删除镜像</li></ul><p>如果这个镜像创建了容器不会被删除</p><pre class=" language-bash"><code class="language-bash">$ docker rmi centos</code></pre><ul><li>查看当前拥有的镜像</li></ul><pre class=" language-bash"><code class="language-bash">$ docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEcentos              latest              a8493f5f50ff        2 weeks ago         192MBnginx               latest              5766334bdaa0        2 weeks ago         183MB</code></pre><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>REPOSITORY</td><td>所属仓库</td></tr><tr><td>TAG</td><td>标签</td></tr><tr><td>IMAGE ID</td><td>进项ID</td></tr><tr><td>CREATED</td><td>创建时间</td></tr><tr><td>SIZE</td><td>镜像创建时间</td></tr></tbody></table><ul><li>删除所有的镜像</li></ul><pre class=" language-bash"><code class="language-bash">$ docker rmi <span class="token variable"><span class="token variable">$(</span>docker images -q<span class="token variable">)</span></span></code></pre><h2 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h2><ul><li>启动一个新容器</li></ul><pre class=" language-bash"><code class="language-bash">$ docker run -i -t centos /bin/bash</code></pre><ul><li>启动一个已经存在的容器</li></ul><pre class=" language-bash"><code class="language-bash">$ docker start 4253385a9655</code></pre><ul><li>启动一个容器退出时不关闭</li></ul><pre class=" language-bash"><code class="language-bash">$ docker run --name mydocker -t -i centos /bin/bash<span class="token punctuation">[</span>root@5324897fb034 /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ps -aux|grep -v "ps -aux" # 可以看到只启动了一个/bin/bash进程</span>USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMANDroot         1  0.0  0.0  11776  3084 ?        Ss   05:49   0:00 /bin/bash</code></pre><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>–name</td><td>镜像的名字</td></tr><tr><td>-t</td><td>分配一个伪终端</td></tr><tr><td>-i</td><td>容器标准输入保持打开状态</td></tr></tbody></table><p>通过容器的ID我们可以发现和容器里面的主机名是一致的</p><pre class=" language-bash"><code class="language-bash">$ docker <span class="token function">ps</span> -a <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"5324897fb034"</span>5324897fb034        centos              <span class="token string">"/bin/bash"</span>              6 minutes ago       Up 6 minutes                                    mydocker</code></pre><ul><li>启动一个容器在退出的时候自动删除这个容器</li></ul><pre class=" language-bash"><code class="language-bash">$ docker run --rm -it centos /bin/bash</code></pre><ul><li>进入一个已经运行的容器</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 这种方式启动，如果退出容器，则这个容器就会被退出，如果其他人登陆这个容器，则操作是同步的</span>$ docker attach 5324897fb034</code></pre><p>通过<code>nsenter</code>访问容器且推出时不销毁容器</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 获取容器的PID</span>$ docker inspect --format <span class="token string">"{{.State.Pid}}"</span> 5324897fb03415434<span class="token comment" spellcheck="true"># 指定PID进入容器</span>$ nsenter -t 15434 -u -i -n -p</code></pre><blockquote><p>nsenter访问的是一个进程的命名空间</p></blockquote><ul><li>查看所有的容器</li></ul><pre class=" language-bash"><code class="language-bash">$ docker <span class="token function">ps</span> -aCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES4253385a9655        centos              <span class="token string">"/bin/bash"</span>         6 minutes ago       Up 4 minutes                            thirsty_visvesvaraya</code></pre><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>CONTAINER ID</td><td>容器的ID</td></tr><tr><td>IMAGE</td><td>通过哪个镜像来运行的</td></tr><tr><td>COMMAND</td><td>最后执行的命令</td></tr><tr><td>CREATED</td><td>创建时间</td></tr><tr><td>STATUS</td><td>状态</td></tr><tr><td>PORTS</td><td>启动的端口</td></tr><tr><td>NAMES</td><td>容器的名称，名称默认是自动生成的</td></tr></tbody></table><ul><li>删除一个容器</li></ul><pre class=" language-bash"><code class="language-bash">$ docker <span class="token function">rm</span> 307f7b240273</code></pre><ul><li>删除一个正在运行的容器</li></ul><pre class=" language-bash"><code class="language-bash">$ docker <span class="token function">rm</span> -f 9dc6a6940ce1</code></pre><ul><li>停止所有正在运行的容器</li></ul><pre class=" language-bash"><code class="language-bash">docker <span class="token function">kill</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">sudo</span> docker <span class="token function">ps</span> -a -q<span class="token variable">)</span></span></code></pre><ul><li>删除所有容器</li></ul><pre class=" language-bash"><code class="language-bash">$ docker <span class="token function">kill</span> <span class="token variable"><span class="token variable">$(</span>docker <span class="token function">ps</span> -a -q<span class="token variable">)</span></span></code></pre><ul><li>删除状态为退出的所有容器</li></ul><pre class=" language-bash"><code class="language-bash">$ docker <span class="token function">rm</span> <span class="token variable"><span class="token variable">$(</span>docker <span class="token function">ps</span> -a -f status<span class="token operator">=</span>exited -qa<span class="token variable">)</span></span></code></pre><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><ul><li>随机端口映射</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 启动容器</span>$ docker run -d -P nginx<span class="token comment" spellcheck="true"># 查看Nginx访问日志</span>$ docker logs c506ed2a4e65</code></pre><ul><li>指定端口映射</li></ul><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> docker run -d -p 81:80 nginx</code></pre><h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><h3 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h3><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>-v /data</td><td>自动生成目标目录</td></tr><tr><td>-v src :dst :rw</td><td>指定目录挂载，并指定挂载目录的权限</td></tr></tbody></table><pre class=" language-bash"><code class="language-bash">$ docker run -i -t --name volume-test1 -v /data centos /bin/bash<span class="token comment" spellcheck="true"># ls /data</span><span class="token comment" spellcheck="true"># 查看挂载的目录</span>$ docker inspect 80cef0fbd4f1</code></pre><p>指定目录挂载</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> docker run -i -t -v /opt:/opt centos   <span class="token comment" spellcheck="true"># df -h | grep "/opt"</span>/dev/sda2       457G   62G  373G  15% /opt</code></pre><h3 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h3><p>一个容器访问另一个容器的数据卷</p><pre class=" language-bash"><code class="language-bash">$ docker run --name nfs -it -d -v /data centos</code></pre><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-d</td><td>让容器在后台运行</td></tr></tbody></table><p>启动其他的容器，使用nfs容器里面的卷</p><pre class=" language-bash"><code class="language-bash">$ docker run -it --name test1 --volumes-from nfs centos</code></pre><h2 id="构建Docker镜像"><a href="#构建Docker镜像" class="headerlink" title="构建Docker镜像"></a>构建Docker镜像</h2><ul><li>手动构建</li></ul><pre class=" language-bash"><code class="language-bash">$ docker run -i -t --name webserver centos<span class="token comment" spellcheck="true"># cd /etc/yum.repos.d/</span><span class="token comment" spellcheck="true"># rpm -ivh https://mirrors.aliyun.com/centos/7.3.1611/os/x86_64/Packages/wget-1.14-13.el7.x86_64.rpm</span><span class="token comment" spellcheck="true"># wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><span class="token comment" spellcheck="true"># wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><span class="token comment" spellcheck="true"># yum -y install nginx</span><span class="token comment" spellcheck="true"># vi /etc/nginx/nginx.conf</span>daemon off<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># exit</span>$ docker commit -m <span class="token string">"webserver"</span> a6e5ab54bf16 ansheng/webserver:v1$ docker images <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"webserver"</span>webserver           v1                  bd32c3d82378        39 seconds ago      363MB$ docker run -d -p 80:80 webserver:v1 nginx$ curl -I 127.0.0.1:82HTTP/1.1 200 OK</code></pre><ul><li>通过DockerFile构建</li></ul><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> /tmp/$ <span class="token function">mkdir</span> webserver$ <span class="token function">cd</span> webserver/$ <span class="token keyword">echo</span> <span class="token string">"Hello, World!"</span> <span class="token operator">></span> index.html$ vim Dockerfile<span class="token comment" spellcheck="true"># This docker file</span><span class="token comment" spellcheck="true"># VERSION</span><span class="token comment" spellcheck="true"># Author: An Sheng</span><span class="token comment" spellcheck="true"># Base image</span>FROM centos<span class="token comment" spellcheck="true">#Maintainer</span>MAINTAINER ansheng ianshengme@gmail.com<span class="token comment" spellcheck="true"># Commands</span>RUN rpm -ivh https://mirrors.aliyun.com/centos/7.3.1611/os/x86_64/Packages/wget-1.14-13.el7.x86_64.rpmRUN <span class="token function">wget</span> -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repoRUN <span class="token function">wget</span> -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repoRUN yum <span class="token function">install</span> nginx -yADD index.html /usr/share/nginx/html/index.htmlRUN <span class="token keyword">echo</span> <span class="token string">"daemon off;"</span> <span class="token operator">>></span> /etc/nginx/nginx.confEXPOSE 80CMD <span class="token punctuation">[</span><span class="token string">"nginx"</span><span class="token punctuation">]</span>$ docker build -t webserver:v2 ./</code></pre><p>运行容器</p><pre class=" language-bash"><code class="language-bash">$ docker run -d -p 80:80 webserver:v2$ curl -I 127.0.0.1:80HTTP/1.1 200 OK</code></pre><ul><li>Dockerfile描述</li></ul><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>FROM</td><td>指定基础镜像</td></tr><tr><td>MAINTAINER</td><td>维护者信息</td></tr><tr><td>RUN</td><td>执行的命令</td></tr><tr><td>ADD</td><td>把本地文件copy到镜像中</td></tr><tr><td>WORKDIR</td><td>指定工作目录</td></tr><tr><td>VOLUME</td><td>目录挂载</td></tr><tr><td>EXPOSE</td><td>启动的端口</td></tr><tr><td>CMD</td><td>最后执行的指令</td></tr></tbody></table><h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><ul><li>时区问题</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@d4e104c000c2 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># date</span>Sat Apr 29 08:51:51 UTC 2017<span class="token punctuation">[</span>root@d4e104c000c2 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ln -sf /usr/share/zoneinfo/Asia/Shanghai  /etc/localtime</span><span class="token punctuation">[</span>root@d4e104c000c2 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># date</span>Sat Apr 29 16:52:28 CST 2017</code></pre><ul><li>字符集问题</li></ul><pre class=" language-bash"><code class="language-bash">LANG<span class="token operator">=</span>en_US.UTF-8</code></pre><ul><li>普通用户使用docker</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> gpasswd -a <span class="token variable">${USER}</span> docker</code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
